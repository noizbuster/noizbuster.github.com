{"meta":{"title":"NoizBuster","subtitle":null,"description":null,"author":"noizbuster","url":"http://noizbuster.com"},"pages":[],"posts":[{"title":"esm-on-nodejs","slug":"2019-01-09-135737-esm-on-nodejs/2019-01-09-135737-esm-on-nodejs","date":"2019-01-09T04:57:37.000Z","updated":"2019-01-10T01:57:13.567Z","comments":true,"path":"2019/01/09/2019-01-09-135737-esm-on-nodejs/2019-01-09-135737-esm-on-nodejs/","link":"","permalink":"http://noizbuster.com/2019/01/09/2019-01-09-135737-esm-on-nodejs/2019-01-09-135737-esm-on-nodejs/","excerpt":"","text":"동기EcmaScrit Module 가 explorer 를 제외한 메이저 브라우저에서 모두 지원이 되는 마당에 코드 재활용성 문제도 있고 해서 ESM 스타일로 일부 코드가 작성되었을 경우 nodejs 프로젝트에서도 사용하고 싶게 되었다.물론 nodejs 의 고유기능들을 사용하려면 (package.js관련된것이나, 배터리 패키지들) ESM 스타일로 코드를 짠들 브라우저 호환성을 보장 할 수 없지만 전체 코드베이스에서 이런 디펜던시를 가지는 파일들이 몇개나 되는지 생각해보면 적용 할 가치는 충분하다고 생각하고, 시간이 지날수록 더욱 중요해 질것이라고 기대한다. javascript 호환성 관련 자료 https://www.w3schools.com/js/js_versions.asp https://caniuse.com/#tables https://node.green/ 비슷한 주제의 읽을거리 Solving the “ESM in NodeJS” Odyssey. 방법여러가지 방법이 있지만 시도해본 메이져한 방법들 각각의 장점, 한계점에 대해 이야기를 해 보겠다. 1. babel build아예 프로젝트 전체를 트랜스파일링 해서 ES5 나 ES6 로 빌드해버리는 방법 장점 nodejs 뿐만 아니라 브라우저에서의 동작도 보장할 수 있다. 단점 빌드시간이 오래걸린다. 서드파티 개발자가 디버깅할때 번거로울 수 있다. 2. nodejs nativenodejs native ESM 호환 기능을 사용함–experimental-modules 장점 별도의 빌드 과정을 만들고 관리하지 않아도 됨 있는파일 그대로 가지고 디버깅 할 수 있음 단점 낮은버전의 nodejs 에서 동작을 보장하지 않음. 마찬가지로 브라우저에서도 그대로 사용 할 수 없음. esm 형태로 작성된 파일은 무조건 .mjs 확장자를 사용해야함. mjs 파일 내에서는 require 를 사용 할 수 없음. 내부적으로 캐싱이 따로 되기 때문에 require 캐시를 이용하여 싱글톤 패턴처럼 사용한 경우에는 프로그램이 의도하지 않은 동작을 할 수 있음 참고 babel 로 빌드된 모듈을 import 하거나 클래스를 상속받을때 오동작함 3. esm장점 mjs 확장자를 강요당하지 않음 기존에 쓰던 테스트코드를 그대로 사용 할 수 있음 zero configuration 별도의 빌드 과정을 만들고 관리하지 않아도 됨 (사용하고 싶다면) ESM파일 내에서 require 도 섞어서 쓸 수 있음. (… 근데 왜?) 단점 babel 로 빌드된 모듈을 import 하거나 클래스를 상속받을때 오동작함 파일이 nodejs 디펜던시가 있는지 없는지 분간하기 어려움 (개발자가 파일에 명시된 디펜던시를 체크해야함) 즉, 웹브라우저에서 쓸수있는 파일이 어떤것인지 명시적이지 않음. 4. @babel/cli 에 포함된 babel-node장점 esm 과 비슷한 편의성, 빌드관리 하지 않아도 됨 메모리를 더 먹는것 같음 babel 로 빌드된 모듈들을 별다른 설정없이도 잘 읽어들임 mjs 확장자를 강요당하지 않음 단점 빌드시간이 오래걸린다. 서드파티 개발자가 디버깅할때 번거로울 수 있다. 추가설명nodejs –experimental-modules, esm 에서 babel로 빌드된 패키지들이 발생시키는 문제구체적으로 설명하자면 babel로 빌드된 패키지들을 읽어올때 default export 를 제외한 export 를 제대로 인식하지 못한다.또, 빌드된 class 들의 constructor 안에서 super() 를 콜하더라도 전혀 동작하지 않는것으로 보였다. 결론TL;DR; 사용하는 라이브러리가 babel로 빌드되어있으면 당분간은 babel 사용이 좋음 빌드 해야하면 babel 설정 그냥 실행만 시키고 싶으면 @babel/cli 설치후 babel-node 로 실행 사용하는/할 라이브러리가 앞으로도 babel이랑 관계가 없을것으로 기대한다면 mjs 확장자를 싫어하면 esm, 써도 상관없다면 nodejs 의 –experimental-modules 를 사용 고찰Broken systemesm 이나 nodejs 자체 옵션을 이용하여 얼마든지 ESM 을 사용 할 수 있음. 그러나 이건 어디까지나 ESM 으로 작성된 파일을 사용하는데 국한된 이야기이고 babel로 빌드된 ESM 모듈을 사용하려면 결국 babel 을 사용하는게 정신건강에 이로워보임브라우저에서 최신 javascript 스펙들을 지원하기 시작한 이래로 ES6^ 의 이용이 급속도로 전파되고 있는 현상이 commonjs 를 사용하는 Node.js 커뮤니티를 지속적으로, 점점 더 심하게 괴롭힐것으로 예상된다.babel을 사용하고 있는 골드가 되어버린 레거시들이 너무 많은데다 안정된 자리를 차지하고 있고 TypeScript를 사용자들의 입장도 있기 때문에 새로운 커뮤니티의 합의를 이루는것은 점점 더 어려워졌다고 본다. 앞으로는 불가능하다고 보는게 옳을것이다. 좋을것은 없다.이런 상황이 Node.js에게 위기가 될것이냐에 대해선 의문이긴 하다. 이미 Node.js 는 충분한 가치를 제공하고 있고 브라우저에서 사용되는 javascript가 commonjs 와 다름에 대해선 선을 그어놓고 있었기 때문에 혼란을 줄 염려도 적다.하지만 범용으로 쓰이고 싶은 라이브러리들이 ESM을 공격적으로 받아들이고 있는데다 절대 다수의 프로젝트들이 관리상의 이유로 한가지 빌드만 만들어 npm에 배포시키고 있다. bower 가 죽어가는 마당에 이런 괴리는 점점 심해질것이고, 이런 괴리는 Node.js 의 입지에 악영향을 줄것이다. How to solve이 문제는 Node.js 가 아니라 npm 으로 풀어야 할 문제인것 같다. 이미 –experimental-modules 나 esm 과 같은 방법으로 유저들은 Node.js 에서 ESM 을 사용하고 싶은 욕망과 그에대한 답변을 들었으며 이를 실무와 유리시키고 있는것이 트랜스파일링 이라고 본다.잠깐 딴 이야기를 하자면 내가 타입스크립트를 좋아하지 않는 이유중에 하나가 type.d 파일의 존재이기도 하다. 아주 거추장스럽고 모든 서드파티들이 신경써준다는 보장도 없다. 버전별로 관리가 될것이라고 기대하는것은 당연히 오산이다.이에 나는 npm 이 flavor 별로 배포를 다양화 할 수 있는 방법을 제공해야 한다고 생각한다.ts, esm, cjs, 지금은 자취를 많이 감춘 coffeescript 등으로 배포를 할 수 있게 만들어야 한다. 일단 그렇게 된다면 앞서 이야기한 babel이 필요없음에도 사용을 강요당한다거나 type.d 파일을 따로 배포한다거나 하는 요상한 일이 일어나지 않을것이고 어떤 패키지가 어떤 환경을 지원하는지 구분하기도 쉬워지고, 때론 이것들이 뒤섞여서 발생하는 오동작이나 어려워지는 테스팅문제가 일부 해결 될 수도 있다. 맺으며Node.js 를 2014년부터 써왔지만 드디어 다 긁어먹고 바닥이 보인다는 느낌이다.내 자신감과는 별개로 내자신에 대한 나의 평가는 남들이 생각하는것보다 박한편인데도 불구하고, 이제는 어디가서 expert 라고 이야기를 해도 되지 않을까 하는 생각마저 최근 들고 있다.그래도 이래저래 편하게 쓰고있는 플랫폼인데 롱런했으면 좋겠다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"js-documentation","slug":"2018-11-19-161357-js-documentation/2018-11-19-161357-js-documentation","date":"2018-11-19T07:13:57.000Z","updated":"2018-11-22T08:02:51.001Z","comments":true,"path":"2018/11/19/2018-11-19-161357-js-documentation/2018-11-19-161357-js-documentation/","link":"","permalink":"http://noizbuster.com/2018/11/19/2018-11-19-161357-js-documentation/2018-11-19-161357-js-documentation/","excerpt":"","text":"도큐먼트 제네레이션을 하려고 하는데 고민이 많았다.타입스크립트 쓰면 typedoc 이 대부분 해결 해 주니까 별 문제가 없지만.ES7 를 쓰고있는 프로젝트들은 esdoc 이나 jsdoc 를 끼고 갈 수 밖에 없다. 내 요구조건은 다음과 같았다. 충분히 유명한 패키지일것 typedef 에서 @extends 혹은 @augments 를 사용 할 수 있을것. document coverage 결론부터 말하자면 document coverage 를 포기하고 커스텀 플러그인을 달아서 jsdoc 를 사용하기로 했다. 시도해본것들은 다음과 같다. JSDoc template docdash tui-jsdoc-template plugins plugins/markdown typedef-extends (handmade) ESDoc template: built in ETC inchjs istanbul nyc 제법 긴 시간동안 검색해보았지만 coverage 툴에서 제공하는 documentation 플러그인이나jsdoc 플러그인중에서 coverage 를 제공하는것은 지금 시점에서는 찾지 못했다.아, inchjs 라는게 있었는데 실행이 되지 않았고 메인테이닝도 잘 되지 않는것 같았다.결국 2,3번 요구조건중 하나는 당분간 포기해야 하는데 결국 도큐먼테이션의 본질에 가까운것이 coverage 가 아니기에 jsdoc 으로 선택하였다. References https://stackoverflow.com/questions/42124012/jsdoc-include-all-properties-from-another-typedef-object https://github.com/OpenGeoscience/geojs/blob/master/jsdoc/plugins/typedef_augments.js*hard copy of above 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * Define a jsdoc plugin to update typedefs that use augments. */exports.handlers = &#123; /** * Modify typedefs that use augments (extends). Add the base typedef's * properties to the augmented typedefs. */ parseComplete: function (e) &#123; var typedefs = &#123;&#125;, augmentedTypedefs = &#123;&#125;, numAugmented = 0; /* Make a dictionary of all known typedefs and a dictionary of augmented * typedefs */ e.doclets.forEach(function (doclet) &#123; if (doclet.kind === 'typedef') &#123; typedefs[doclet.longname] = doclet; if (doclet.augments &amp;&amp; doclet.augments.length) &#123; augmentedTypedefs[doclet.longname] = doclet; &#125; &#125; &#125;); while (Object.keys(augmentedTypedefs).length !== numAugmented) &#123; numAugmented = Object.keys(augmentedTypedefs).length; Object.keys(augmentedTypedefs).forEach(function (name) &#123; var doclet = augmentedTypedefs[name]; /* If this typedef is augmented by an augmented typedef, skip it for * now. Ignore self references */ if (doclet.augments.some(function (augmentName) &#123; return augmentName !== name &amp;&amp; augmentedTypedefs[augmentName]; &#125;)) &#123; return; &#125; /* Ensure we have properties */ doclet.properties = doclet.properties || []; /* Make a dictionary so we don't clobber known properties. */ var properties = &#123;&#125;; doclet.properties.forEach(function (prop) &#123; properties[prop.name] = prop; &#125;); /* For each augment base, add its properties if we don't already have * them. If the typedef augments two other typedefs that each have a * property of the same name, the last listed will be shown (done by * reversing the augments list). */ doclet.augments.slice().reverse().forEach(function (augmentName) &#123; if (augmentName !== name &amp;&amp; typedefs[augmentName] &amp;&amp; typedefs[augmentName].properties) &#123; typedefs[augmentName].properties.forEach(function (origprop) &#123; if (!properties[origprop.name]) &#123; /* Make a copy so we don't mutate the original property. */ var prop = Object.assign(&#123;&#125;, origprop); /* Add a value that a rendering template could use to show that * the property was inherted from a parent. Since that in turn * could have been inherited, preserve a known value. */ prop.inherited = prop.inherited || augmentName; /* Add the property to the typedef and to the list of known * properties. */ doclet.properties.push(prop); properties[prop.name] = prop; &#125; &#125;); &#125; &#125;); /* We've finished processing this typedef, so remove it from the * augmented list. */ delete augmentedTypedefs[name]; &#125;); &#125; &#125;&#125;;","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"errorhandling-async-express-router","slug":"2018-08-23-162836-errorhandling-async-express-router/2018-08-23-162836-errorhandling-async-express-router","date":"2018-08-23T07:28:36.000Z","updated":"2018-11-22T00:59:42.274Z","comments":true,"path":"2018/08/23/2018-08-23-162836-errorhandling-async-express-router/2018-08-23-162836-errorhandling-async-express-router/","link":"","permalink":"http://noizbuster.com/2018/08/23/2018-08-23-162836-errorhandling-async-express-router/2018-08-23-162836-errorhandling-async-express-router/","excerpt":"","text":"Error Handling On Express나는 Express API 를 만들때 글로벌 트랩을 만들어서 UnHandled Exception 을 처리하는 방법을 즐겨쓴다.12345678910111213// Global Error Handlerapp.use(function (err, req, res, next) &#123; let status = err.status || 500; let extra = err.extra || &#123;&#125;; l.e('Unhandled Error', err); let resBody = &#123;message: err.message, extra: extra, details: err&#125;; if (process.env.NODE_ENV === 'production') &#123; return res.status(status).json(&#123;message: 'internal error'&#125;); &#125; else &#123; return res.status(status).json(resBody) &#125;&#125;); Synchronous 핸드러를 썼을때는 잘 동작했겠지만 async function 을 쓰면서 부터는 throw 되는 에러들이 express 를 타지 못하는 문제가 있다.12345678910// 1-1 router with weak error handlingrouter.get('/:rid', async function (req, res) &#123; let resource = await Resource.findOne(&#123;_id: req.params.rid&#125;); if (resource) &#123; res.json(resource); &#125; else &#123; res.status(404).json(&#123;msg: 'not found'&#125;); &#125;&#125;); 예를 들어 위와 같은 코드에서 findOne 이 실패하면 GlobalErrorHandler 을 타지 못하고 UnhandledPromiseRejectionWarning 을 맞게된다. 아주 정형화된 404 같은 예외는 헬퍼를 작성해서 쓰거나 글로벌에서 하도록 취향껏 선택하면 되니 논외로 하더라도, 예측가능하거나 failover 가 필요한 error 들은 try/catch로 별도로 핸들링 해주어야 한다.하지만 이밖에 일어나는 예측하지 않은 에러들은 어짜피 API 입장에선 실패이고 (복구 가능하든 가능하지 않든간에) 500 뱉고 끝내야 하므로 global에서 처리하는게 바람직하다. 1234567891011121314// 1-2 router with try/catchrouter.get('/:rid', async function (req, res, next) &#123; try &#123; let resource = await Resource.findOne(&#123;_id: req.params.rid&#125;); if (resource) &#123; res.json(resource); &#125; else &#123; res.status(404).json(&#123;msg: 'not found'&#125;); &#125; &#125; catch (e) &#123; next(e); &#125;&#125;); 이걸 해결하려면 이런식으로 try/catch 로 묶어서 처리해야 한다.맘에 안든다 별 의미없이 코드 블럭이 한레벨 더 들어가게 되기 때문에 가독성도 떨어질뿐만 아니라 모든 라우트에 try/catch를 해줘야하는것도 번거롭다.또, 만약 코드 내부에서 선별적으로 다른 Exception 을 발생시켜야 하는 경우에는 생성한 Error 가 복수개의 catch 문을 통과하게 되기 때문에 지저분해진다. 좀 더 깔끔하게 라우터를 작성할 수 있도록 라우터 핸들러를 wrapping 해서 throw 되는 exception 을 next 로 넘겨주게끔 처리 할 수 있다. 12345678//wrapperasyncErrorHandler(fn) &#123; return function (req, res, next) &#123; return Promise .resolve(fn(req, res, next)) .catch(next); &#125;&#125; 위와같은 wrapper 를 하나 만들어두고 불러다가 쓰면 훨씬 가독성이 좋아진다 123456789// 1-3 using asyncErrorHandlerrouter.get('/:rid', asyncErrorHandler(async function (req, res, next) &#123; let resource = await Resource.findOne(&#123;_id: req.params.rid&#125;); if (resource) &#123; res.json(resource); &#125; else &#123; res.status(404).json(&#123;msg: 'not found'&#125;); &#125;&#125;)); References using-async-await-in-express-with-node npm package: express-async-handler how-to-write-async-await-without-try-catch-blocks-in-javascript","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"cron-on-nodejs","slug":"2018-03-30-180144-cron-on-nodejs/2018-03-30-180144-cron-on-nodejs","date":"2018-03-30T09:01:44.000Z","updated":"2018-03-30T09:24:40.964Z","comments":true,"path":"2018/03/30/2018-03-30-180144-cron-on-nodejs/2018-03-30-180144-cron-on-nodejs/","link":"","permalink":"http://noizbuster.com/2018/03/30/2018-03-30-180144-cron-on-nodejs/2018-03-30-180144-cron-on-nodejs/","excerpt":"","text":"What is cron? How can I use?https://en.wikipedia.org/wiki/Cronhttps://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm Useful webtools for development with croncheck invocations from now http://cron.schlitt.info/check validation https://crontab.guru/ My choice for using cron on nodejs projectFor parsing cron expression to date object. and calculating next invocation.https://github.com/harrisiirak/cron-parser Better way to execute some codehttps://github.com/tellnes/long-timeout","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"survey-nodejs-config-package","slug":"2018-03-12-145933-survey-nodejs-config-package/2018-03-12-145933-survey-nodejs-config-package","date":"2018-03-12T05:59:33.000Z","updated":"2018-03-13T04:57:40.815Z","comments":true,"path":"2018/03/12/2018-03-12-145933-survey-nodejs-config-package/2018-03-12-145933-survey-nodejs-config-package/","link":"","permalink":"http://noizbuster.com/2018/03/12/2018-03-12-145933-survey-nodejs-config-package/2018-03-12-145933-survey-nodejs-config-package/","excerpt":"","text":"Motivationnodejs 프로젝트를 하면서 build stream 이나 configuration 의 default 를 관리해야 할 일이 많다. 프로젝트들이 복잡해짐에 따라 다양한 요구조건들이 생기는데 내가 써본 라이브러리들이 이런 문제를 다 커버하지 못하는 문제가 있다. 내가 경험했던 패키지들의 특징과 장단점을 비교해보겠다. What I Need 배포는 docker 로 이루어 지기 때문에 config 디렉토리가 통째로 빈 디렉토리로 덮어씌워질 수 있다. (docker data volume 은 file 단위의 mount 를 지원하지 않는다.) 하지만 유저가 편집하는데 참고가 되기 위해 default 파일이 필요에 의해 재생되어야 한다 개발편의상 environment variable (NODE_ENV) 에 따라 참조하는 configuration 파일이 달라져야 한다. 내부에서 동적으로 로드되는 플러그인마다 서로 다른 configuration 을 사용하기 때문에 singleton 뿐만 아니라 instance 형태로도 configuration 을 로드할 수 있어야 한다. Node Packagesconfig (node-config)2번 요구조건을 만족한다. 여러가지의 파일 포맷을 지원하며 configuration 을 읽고 없는 값들은 default 에서 마저 로드하는 등의 작업이 되어있다. 사용하기 간편하나 singleton 으로만 동작하고 대부분의 입력값을 environment variable 을 참조하기 때문에 플러그인을 런타임에 로드하는 프로젝트의 특성상 플러그인들은 자신이 가진 별도의 configuration 을 읽지 못한다. cosmiconfig3번 요구조건을 만족한다. instance로 configuration 을 로드 할 수 있기 때문에 plugin 안에서도 자신이 원하는 파일을 로드해서 쓸 수 있다. 단, NODE_ENV 별로 ㄷ른 파일을 읽는 기능은 제공하지 않는다. What I Did처음에는 config 를 이용해서 plugin 안에서 다른 파일을 읽게 할 수 있을것이라고 기대했다 때문에 1번 요구조건을 만족시키기 위해 config package 를 config-extra 로 wrapping 해서 사용 했다. plugin 을 리팩토링하면서 제대로 만들려고 하니까 로드가 잘 안된다는것을 확인했고, 다른 라이브러리를 찾아보기로 했고. cosmiconfig 를 그렇게 알게 되었는데 역시나 한계가 많아서 못쓰게 되었다. What I Going To Do빡쳐서 안되겠다 직접 만들어서 써야지. 다양한 확장자나 instance 별 로드같이 fancy한 가능 없이 baremetal로 작성해야겠다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"another-webapp-in-angulario","slug":"2018-03-07-144906-another-webapp-in-angulario/2018-03-07-144906-another-webapp-in-angulario","date":"2018-03-07T05:49:06.000Z","updated":"2018-03-08T00:08:22.656Z","comments":true,"path":"2018/03/07/2018-03-07-144906-another-webapp-in-angulario/2018-03-07-144906-another-webapp-in-angulario/","link":"","permalink":"http://noizbuster.com/2018/03/07/2018-03-07-144906-another-webapp-in-angulario/2018-03-07-144906-another-webapp-in-angulario/","excerpt":"","text":"Goal일을 하면서, 혹은 내 서브 프로젝트를 하면서 만들게 될 헤테로지니어스한 웹앱들을 한군데서 서비스(적어도네비게이팅) 을 하고 싶었다.지금 당장 제일 손에 익은 툴이 angular.io (angular2 &gt; ) 이기 때문에 이것으로 Navbar 를 비롯탄 일종의 플랫폼? 을 만들고 개별적으로 떠있는 웹 서비스들을 이 안에서 보여주는것을 목표로 잡았다. Using Angular Router?원래 내가 하고 싶었던것은 angular route 가 제어하는 route-outlet 에다가 다른 웹앱을 뿌리는것이었다. 헌데 검색을 해보니 그리 만만치 않다는것을 알게 되었다. 적어도 이렇게 하려면 angular.io app 으로 만든다음 bootstrap 을 해서 써야 하는데 정상적으로 목표로 하는 방법이 아닌데다가 angular 로 만든앱이 아니거나 버전이 다른것으로 만든것이 돌아가지 않는다는 단점이 있다. 아무래도 범용성이 떨어지니 처음에 조건으로 달았던 이종간 통합 이 물건너 갔으니 이 방법은 패스. References https://www.linkedin.com/pulse/inception-one-angularjs-application-inside-another-m%C3%A1rquez-soto/ https://stackoverflow.com/questions/18184617/angularjs-how-to-nest-applications-within-an-angular-app https://www.linkedin.com/pulse/inception-one-angularjs-application-inside-another-m%C3%A1rquez-soto/ https://stackoverflow.com/questions/18571301/angularjs-multiple-ng-app-within-a-page?lipi=urn%3Ali%3Apage%3Ad_flagship3_pulse_read%3BH9CfNWXKST%2BpQndZMjYiOA%3D%3D HttpClient + innerHtml?다른 방법을 조사를 해보니 iframe 으로 구현하는 방법과 http client 에서 데이터를 얻은다음 이걸 innerHtml 로 뿌리는 방법이 있었다. 일단 innerHtml 을 사용하는 방법은 패스, 스타일을 못불러온다거나 리액티브한 기능들이 제대로 동작할리가 없다고 생각했고 대체적으로 잘 동작한다한들 일부 문제가 생기는걸 고칠 방법이 없다. 이것도 패스. Using iframe결국 iframe 으로 구현하는 방법만 남았는데 처음부터 알고는 있었지만 의도적으로 피하려고 했던데에는 이유가 있다. Weak Security일단 보안차원에서 취약해진다는 문제가 있다. CORS적용하고 별 고생을 해도 생각치 못한곳에서 XSS가 나를 반겨주겠지만, 이게 아니면 현재로선 별 도리가 없다. Hostname Issue서비스를 할때 baseHref 같은건 의도적으로 세팅을 하는것이기 때문에 클라이언트가 태생부터 알 수 있다. 하지만 hostname 은 별개 문제이다. iframe 에 웹앱을 뿌리려면 url을 가지고 던져야 하는데 hostname은 환경마다 다를 수 있다. 플랫폼앱의 url 을 같이 쓰면 된다라고 생각하면 편할것 같지만 앞으로의 서비스 구성이 어떻게 될지 모르기에 그렇게 하고싶지는 않다. 더군다나 public domain 이 아니라 onpremise 로 설치된 경우에는 접속하는 위치에 따라서 hostname 이 달라지기 때문에 빌드타임에 박거나 하드코딩을 할 수 없다. Service Discovery전술한 hostname issue 를 해결하기 위해서는 결국 서버의 도움이 필요하다.서비스를 추가하거나 상태에 따라 서비스 노출을 제어하고 싶으면 게이트웨이에 하드코딩 하는것보다 서비스 디스커버리를 구현해서 API로 정보를 클라이언트에게 던져주는게 좋을것이다. References https://stackoverflow.com/questions/38862007/loading-external-url-in-angular2-router-outlet","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"http2-header-naming-convention","slug":"2018-03-07-144151-http2-header-naming-convention/2018-03-07-144151-http2-header-naming-convention","date":"2018-03-07T05:41:51.000Z","updated":"2018-03-07T05:48:45.632Z","comments":true,"path":"2018/03/07/2018-03-07-144151-http2-header-naming-convention/2018-03-07-144151-http2-header-naming-convention/","link":"","permalink":"http://noizbuster.com/2018/03/07/2018-03-07-144151-http2-header-naming-convention/2018-03-07-144151-http2-header-naming-convention/","excerpt":"","text":"HTTP/2 Header Naming Conventionserver 코딩을 하는중에 header 를 다 lower case 로 자동변환 시켜주는짓을 API 게이트웨이 서버 미들웨어가 하는것을 발견했다.뭔가 이유가 있을것 같아 검색을 해보니 HTTP/2 스펙에서 header 이름을 lowerCase로 변환해줘야한다(MUST) 라고 표현하고 있다는걸 알게 되었다.HTTP/2 의 사용처가 점점 많아질것이니까 지금부터 미리미리 대비를 해야겠다.다른 서비스에서도 lowerCase로 변경해서 내부적으로 처리하도록 하던가 헬퍼 미들웨어를 만들던가 해야지 References 발견한 stackoverflow 스레드 Secrion 8.1.2 of rfc7540","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"},{"name":"http","slug":"http","permalink":"http://noizbuster.com/tags/http/"},{"name":"protocol","slug":"protocol","permalink":"http://noizbuster.com/tags/protocol/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"my-job-philosophy","slug":"2017-09-04-093944-my-job-philosophy/2017-09-04-093944-my-job-philosophy","date":"2017-09-04T00:39:44.000Z","updated":"2017-09-04T00:39:44.706Z","comments":true,"path":"2017/09/04/2017-09-04-093944-my-job-philosophy/2017-09-04-093944-my-job-philosophy/","link":"","permalink":"http://noizbuster.com/2017/09/04/2017-09-04-093944-my-job-philosophy/2017-09-04-093944-my-job-philosophy/","excerpt":"","text":"","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"market-research-hansung-laptop-20170710","slug":"2017-07-25-105709-market-research-hansung-laptop-20170710/2017-07-25-105709-market-research-hansung-laptop-20170710","date":"2017-07-25T01:57:09.000Z","updated":"2017-07-25T01:57:09.791Z","comments":true,"path":"2017/07/25/2017-07-25-105709-market-research-hansung-laptop-20170710/2017-07-25-105709-market-research-hansung-laptop-20170710/","link":"","permalink":"http://noizbuster.com/2017/07/25/2017-07-25-105709-market-research-hansung-laptop-20170710/2017-07-25-105709-market-research-hansung-laptop-20170710/","excerpt":"","text":"","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"gmail-filtering","slug":"2017-07-13-131835-gmail-filtering/2017-07-13-131835-gmail-filtering","date":"2017-07-13T04:18:35.000Z","updated":"2017-07-13T04:23:57.524Z","comments":true,"path":"2017/07/13/2017-07-13-131835-gmail-filtering/2017-07-13-131835-gmail-filtering/","link":"","permalink":"http://noizbuster.com/2017/07/13/2017-07-13-131835-gmail-filtering/2017-07-13-131835-gmail-filtering/","excerpt":"","text":"Attachment relatede.g.larger:5m older_than:5y size:5m searches for attachments of 5MBlarger:5m searches for attachments of 5MB and largersmaller:5m searches for attachments smaller than 5MB Label relatednot labeled emailhas:nouserlabels it query also sent mailif not want to see sent mail -label:sent and also chat log -label:chats","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"elements-of-project","slug":"2017-07-13-104204-elements-of-project/2017-07-13-104204-elements-of-project","date":"2017-07-13T01:42:04.000Z","updated":"2017-07-13T04:26:10.048Z","comments":true,"path":"2017/07/13/2017-07-13-104204-elements-of-project/2017-07-13-104204-elements-of-project/","link":"","permalink":"http://noizbuster.com/2017/07/13/2017-07-13-104204-elements-of-project/2017-07-13-104204-elements-of-project/","excerpt":"","text":"프로젝트 구성요소 Development Environment IDE Version Coding Convention SCM CI (Integrate Test) CD docker Code Coverage (Unit Test) Documentation Guide for Contributers API Specification How to Use Issue Tracker Resource Negotiation Port","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"authentication-on-angulario","slug":"2017-06-05-141344-authentication-on-angulario/2017-06-05-141344-authentication-on-angulario","date":"2017-06-05T05:13:44.000Z","updated":"2017-07-13T00:37:45.560Z","comments":true,"path":"2017/06/05/2017-06-05-141344-authentication-on-angulario/2017-06-05-141344-authentication-on-angulario/","link":"","permalink":"http://noizbuster.com/2017/06/05/2017-06-05-141344-authentication-on-angulario/2017-06-05-141344-authentication-on-angulario/","excerpt":"","text":"참고 문서 https://auth0.com/blog/angular-2-authentication/ https://blog.thoughtram.io/angular/2016/07/18/guards-in-angular-2.html https://medium.com/@blacksonic86/angular-2-authentication-revisited-611bf7373bf9 https://medium.com/@ladyleet/popups-modals-and-navigation-using-angular-material-2-components-in-your-angular-2-project-faf510dbcdee http://4dev.tech/2016/03/login-screen-and-authentication-with-angular2/ https://stackoverflow.com/questions/34464108/angular2-set-headers-for-every-request","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"근래 소프트웨어 운용방법상 시맨틱 버저닝에 대한 의문","slug":"2017-01-16-151731-is-semantic-versioning-fit-on-recently-lifecycle-of-software/2017-01-16-151731-is-semantic-versioning-fit-on-recently-lifecycle-of-software","date":"2017-01-16T06:17:31.000Z","updated":"2017-01-16T07:57:49.087Z","comments":true,"path":"2017/01/16/2017-01-16-151731-is-semantic-versioning-fit-on-recently-lifecycle-of-software/2017-01-16-151731-is-semantic-versioning-fit-on-recently-lifecycle-of-software/","link":"","permalink":"http://noizbuster.com/2017/01/16/2017-01-16-151731-is-semantic-versioning-fit-on-recently-lifecycle-of-software/2017-01-16-151731-is-semantic-versioning-fit-on-recently-lifecycle-of-software/","excerpt":"","text":"Introduction근래 가장 많이 사용되는 버저닝 방법론으로 semantic versioning 을 이야기 했을때 반대하는 사람은 그리 많지 않을것이다. 매우 체계적이며 직관적이고 버전간 호환관계또한 알 수 있기 때문에 많은 프로젝트와 사람들에게 사랑받고 있는 방법이다. 하지만 근래에 개발을 해오면서 느끼는 몇가지 한계점이 있고, 이를 어떻게 극복해 볼것인가에 대한 가벼운 고찰을 해보겠다. Limitation of semantic versioning Dynamic 하게 변하는 프로젝트에서 major 버전이 너무 빠르게 올라간다. 변화가 많은 초창기 프로젝트의 버저닝이 곤란하다. 최근 공분을 산 angular4 버전 계획 발표도 비슷한 문제라고 본다.전통적으로 역사가 깊은 소프트웨어들은 지금도 큰 문제가 없다고 본다. stability 가 중요하고 이미 구현해야할 기능들은 어느정도 거의 다 구현이 되어있기 때문에 뭔가 급격하게 바뀌고 이런일이 여간해선 발생하지 않는다. 따라서 breaking change 들은 몰아서 major 업데이트때 한번에 일어난다.하지만 웹 기술은 매우 기민하게 변화하고 javascript라는 언어가 싱귤래리티를 목전에 두고 있기 때문에 예측하기 어려운 breaking change 의 대응을 가정해야한다.이런 이유 때문인지 angular 팀은 반년, 짧으면 3개월의 메이저 버전 업데이트를 계획해놓고 있으며. 2버전을 목빠지게 기다린 팬보이들에게 오피셜릴리즈 3개월만의 4버전 발표는 정말 큰 도발로 다가왔을것이다. 결국은 위에서 언급한 문제들은 모두 빠른 배포 사이클로 인해 생기는 문제점이다.통신, 클라우드 컴퓨팅 인프라가 발전함에 따라 현대의 소프트웨어의 배포주기는 점점 짧아지고 있고, Immutable Infrastructure같은 패러다임이 docker 등을통해 프로덕션레벨로 올라옴에 따라 더욱 이런 흐름은 가속화 되고 있다. 과연 이런 환경에서 semantic versioning 이 적절한가에 대한 의문이 든다.개인적으로 major 버전의 숫자가 커지는것 자체가 문제를 일으킨다고 생각하진 않는다.하지만 메이저 버전업의 주기가 빨라지는것은 여러 문제점을 야기한다. 프로젝트 관리차원과 stability 유지차원에서 프로젝트 운영 주체가 그럴싸한 버저닝 가이드라인을 제시하지 않는다면 다음과 같은 문제가 발생할 수 있다. LTS 버전관리, 제시의 어려움 patch 해야할 관리 포인트 증가 버전을 freeze 하고 배포해야할 프로그램들이 그나마 안심하고 지원받을 수 있는 방법이 패치버전 업그레이드일것이다. 하지만 프로젝트를 운영하는 주체 입장에서 여러개의 메이저 버전의 패치를 관리하는것은 부담되는일이 아닐수 없다. 해결안Milestone 개념으로 version layer 를 추가한다. 운영방법 m.b.c.d M: Milestone LTS 버전등을 관리할 큰 마일스톤 단위 o: obsolete remove deprecation breaking change 를 야기하는 패치, a: feature 기능추가, backward competibility를 해치지 않음 p: patch 인터체이스에 영향을 끼치지 않는 버그픽스","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"semver","slug":"semver","permalink":"http://noizbuster.com/tags/semver/"},{"name":"semantic","slug":"semantic","permalink":"http://noizbuster.com/tags/semantic/"},{"name":"versioning","slug":"versioning","permalink":"http://noizbuster.com/tags/versioning/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"fixing-atom-and-idea-file-refresh-issue","slug":"2017-01-09-140517-fixing-atom-and-idea-file-refresh-issue/2017-01-09-140517-fixing-atom-and-idea-file-refresh-issue","date":"2017-01-09T05:05:17.000Z","updated":"2017-01-09T05:57:42.658Z","comments":true,"path":"2017/01/09/2017-01-09-140517-fixing-atom-and-idea-file-refresh-issue/2017-01-09-140517-fixing-atom-and-idea-file-refresh-issue/","link":"","permalink":"http://noizbuster.com/2017/01/09/2017-01-09-140517-fixing-atom-and-idea-file-refresh-issue/2017-01-09-140517-fixing-atom-and-idea-file-refresh-issue/","excerpt":"","text":"Fixing limit of watch issue sudo vi /etc/sysctl.d/max_user_watches.conf write fs.inotify.max_user_watches = 524288 the file sudo sysctl -p --system restart atom or idea Reference https://github.com/atom/atom/blob/master/docs/build-instructions/linux.md#typeerror-unable-to-watch-path https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://noizbuster.com/tags/linux/"},{"name":"webstorm","slug":"webstorm","permalink":"http://noizbuster.com/tags/webstorm/"},{"name":"atom","slug":"atom","permalink":"http://noizbuster.com/tags/atom/"},{"name":"idea","slug":"idea","permalink":"http://noizbuster.com/tags/idea/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"survey-npm-yaml-lib","slug":"2016-12-19-140419-survey-npm-yaml-lib/2016-12-19-140419-survey-npm-yaml-lib","date":"2016-12-19T05:04:19.000Z","updated":"2016-12-19T07:04:55.443Z","comments":true,"path":"2016/12/19/2016-12-19-140419-survey-npm-yaml-lib/2016-12-19-140419-survey-npm-yaml-lib/","link":"","permalink":"http://noizbuster.com/2016/12/19/2016-12-19-140419-survey-npm-yaml-lib/2016-12-19-140419-survey-npm-yaml-lib/","excerpt":"","text":"Surveyed 2016-12-19 TL;DR : js-yaml Win yaml-jsLicense: WTFPL2,580 downloads in the last day34,263 downloads in the last week169,836 downloads in the last month js-yamlLicense: MIT134,940 downloads in the last day2,614,264 downloads in the last week10,545,700 downloads in the last month yamljsLicense: MIT7,426 downloads in the last day116,115 downloads in the last week455,376 downloads in the last month","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"npm","slug":"npm","permalink":"http://noizbuster.com/tags/npm/"},{"name":"yaml","slug":"yaml","permalink":"http://noizbuster.com/tags/yaml/"},{"name":"package","slug":"package","permalink":"http://noizbuster.com/tags/package/"},{"name":"library","slug":"library","permalink":"http://noizbuster.com/tags/library/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"redemption-monitor-design","slug":"2016-11-27-174831-redemption-monitor-design/2016-11-27-174831-redemption-monitor-design","date":"2016-11-27T08:48:31.000Z","updated":"2016-11-30T01:14:11.022Z","comments":true,"path":"2016/11/27/2016-11-27-174831-redemption-monitor-design/2016-11-27-174831-redemption-monitor-design/","link":"","permalink":"http://noizbuster.com/2016/11/27/2016-11-27-174831-redemption-monitor-design/2016-11-27-174831-redemption-monitor-design/","excerpt":"","text":"Introduction게임 서버를 만들었지만 개발자 혹은 운영자가 게임 서버나 내부의 상황을 보기 위해서 매번 REST client 를 이용하는것은 비현실적으로 불편하다.때문에 서버 내부의 정보를 시각적으로 혹은, 미리짜여진 규격에 맞추어 관제 할 수 있는 방법이 필요했다.그 수단으로 여러가지가 있겠지만 웹앱으로 만드는것이 제일 범용적이고 편할것이라고 판단하였다. DesignFeatures 기본적인 서버 상태 확인 (service discovery 와 연동) 게임서버내 맵 상황, 각종 통계 제공 Conditions개발을 위한 개발을 피하기 위해 몇가지 조건이 수반된다. 의존성은 최대한 없앤다. 크루즈 컨트롤을 제외한 API는 가능한 gateway 에서 가져다 쓴다. Simple, Simple and Simple 이 앱은 개발&amp;운영 내부자가 사용하고 일반 End-User 에게는 제공되지 않을것이기 때문에 localhost 에서 동작함을 가정한다. Stacks &amp; Components angular2 mdl gulp express js node js","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"redemption","slug":"redemption","permalink":"http://noizbuster.com/tags/redemption/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"성전! SQL 테이블명","slug":"2016-11-03-153952-holywar-about-table-name/2016-11-03-153952-holywar-about-table-name","date":"2016-11-03T06:39:52.000Z","updated":"2016-11-07T00:06:15.343Z","comments":true,"path":"2016/11/03/2016-11-03-153952-holywar-about-table-name/2016-11-03-153952-holywar-about-table-name/","link":"","permalink":"http://noizbuster.com/2016/11/03/2016-11-03-153952-holywar-about-table-name/2016-11-03-153952-holywar-about-table-name/","excerpt":"","text":"Introduction디비랑은 별로 안친해서 디테일하게 네이밍 컨벤션 같은것에 대해 생각해본적이 없었다. 이번에 업무 관련해서 작명하다가 관례가 있을까 싶어 조사하던중 재미있는 discussion 들을 보게 되어 정리해보게 되었다. ORM 이 미친짓을 한다?Mongoose 를 쓸적에 collection 이름을 정할때 단수형을 자꾸 복수형으로 바꾸길래 (e.g. user 를 users로 지가 바꾼다) {collection: &#39;user&#39;} 이런식으로 강제로 collection 의 이름을 정해주면서 스키마를 정의한적이 있었다. 마찬가지로 mariadb 를 사용하기위해 도입한 sequelize 도 똑같은짓을 하는데 얘는 mongoose 처럼 쉽게 테이블 이름을 정해주는것이 아니라123define: &#123; freezeTableName: true&#125; 이런식으로 매번 옵션을 주어야 하는 귀찮은 짓을 해야한다. 검색해 보니 table 은 복수의 데이터를 저장하기 때문에 복수형으로 명명한다는게 관례라는걸 알게 되었는데 문제는 이제 ISO 표준으로도 정리가 되어있다는것이다. 아니 아무리 표준이라고 하지만 그래도 엄연히 사용자가 입력한 필드인데 이런건 convention으로 극복을해야지 ORM이 지멋대로 바꿔도 되는건가? 라는 생각이 든데다가 이게 s, es 만 붙는게 아니라 예외도 많을텐데 그것들도 다 대응을 못할텐데? 라는 의심이 되었다. 대표적으로 의심이 되었던것이 child -&gt; children 같이 불규칙하거나 water 같이 불가산명사인 경우 어떻게 처리하는지가 궁금해졌다 시도를 해보았다. 근데 맙소사 잘 동작한다? 이런 노가다를 무릅쓰면서까지 이런걸 구현레벨로 끌어다 놓은 저의가 궁금해서 검색을 해보니 아니라 다를까 시궁창 싸움이 벌어지고 있었다. http://stackoverflow.com/questions/338156/table-naming-dilemma-singular-vs-plural-names http://stackoverflow.com/questions/4702728/relational-table-naming-convention 나에겐 그냥 이건 부먹 찍먹 논쟁처럼 무의미한 정력낭비라고 생각이 되어서 이런걸 구현레벨까지 끌어다 놓은 강경파가 누군지 궁금하여 sequelize repository에서 blame 해보니한 유저가 inflection 이라는 라이브러리를 추가해서 이걸 구현해 놓은것을 보았다 대단한 열정인것 같다. Conclusion영원히 팝콘이나 먹으며 강건너 불구경을 하고싶지만 나도 개발전선에 있는이상 결정을 해야한다.두가지 경우에 대해 수용하겠다는 입장을 세우기로 하였다. 복수형을 쓰는 경우에는 코드에도 명시적으로 복수로 언급하여 inflection의 동작을 차단할것. 단수형을 쓰는 경우에도 OK지만 모든 사람이 동의해야 함. 사족을 달자면 표준이 복수라는게 깨림직하지만 경험상, 생각되는 문제가 많기로는 복수형을 사용하는게 더 불리해보인다. (naming scheme 이 있는 mapping table 에 끼치는 영향, 신조어에 대응이 느림, 비영어권 사용자들의 실수를 유발 할 수 있음, model명이랑 동일 하게 사용하고 싶은경우 findOne 하더라도 복수형의 인스턴스 이름을 써야함.. 등등) 진짜 별 이상한데서도 성전이 열린다는 사실이 재미있다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"mariadb","slug":"mariadb","permalink":"http://noizbuster.com/tags/mariadb/"},{"name":"sql","slug":"sql","permalink":"http://noizbuster.com/tags/sql/"},{"name":"naming convention","slug":"naming-convention","permalink":"http://noizbuster.com/tags/naming-convention/"},{"name":"convention","slug":"convention","permalink":"http://noizbuster.com/tags/convention/"},{"name":"mapping table","slug":"mapping-table","permalink":"http://noizbuster.com/tags/mapping-table/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Transaction on MongoDB","slug":"2016-11-01-132517-mongodb-transaction/2016-11-01-132517-mongodb-transaction","date":"2016-11-01T04:25:17.000Z","updated":"2016-11-07T00:06:36.179Z","comments":true,"path":"2016/11/01/2016-11-01-132517-mongodb-transaction/2016-11-01-132517-mongodb-transaction/","link":"","permalink":"http://noizbuster.com/2016/11/01/2016-11-01-132517-mongodb-transaction/2016-11-01-132517-mongodb-transaction/","excerpt":"","text":"Introduction서버 개발을 하는 도중 MongoDB의 서로 다른 Document 에 Atomic 하게 update 가 일어나야 하는 상황이 왔다. 서버는 Node로 되어있고 ORM은 mongoose 를 쓰고있다.헌데 Mongoose 에는 consistency를 보장하면서 복수의 Document를 업데이트 하는 API가 구현되어있지 않은것으로 보여 이를 해결하고자 한다. Transaction in MongoDBMongoDB 는 Optimistic concurrency control (OCC) 를 채용하고 있고 내부적으로 write lock을 건다고 한다. 때문에 한개 Collection (=table in RDB) 내 에서의 consistency 는 보장이 된다. 하지만 서로 다른 여러개의 collection 에 query 를 수행해야 할 때는 consistency 가 보장되지 않는다. RDB 에서는 Transaction 이라는 개념으로 이런 consistency 를 보장하는 기능을 제공하는데MongoDB는 Official 하게 이러한 기능을 제공하지 않고 two-phase commits 의 패턴으로 이를 극복하도록 가이드 하고 있다. https://docs.mongodb.com/v3.2/tutorial/perform-two-phase-commits/ Two-phase commits for MongoDBTwo phase commit 은 널리 알려진 패턴이지만 mongoose 에 helper 가 구현되어있지 않기 때문에 차선을 찾아야 했다. 직접 만드는것은 여간 귀찮은일이 아니며, 나같이 미천한 실력으로 미려하게 만들수 있을지도 모르기 때문에 미리 누군가가 만들어둔것이 있으리라 여기고 탐색을 하였다. 영 좋지 않은것을 제외하고는 두가지 정도가 물망에 올랐다. https://github.com/niahmiah/mongoose-transact 한국 사람이 만들었다, 잘 만들어져 있다. two-phase commit 으로 구현되어있다. rollback 도 구현되어있는듯. 유사시엔 이것을 쓰면 되겠다. https://github.com/wokim/mongoose-transaction-plugin 다르게 구현된 다른 모듈이다. 양심적으로 README에 잘 적혀있다. “만약 네가 이게 필요한거면 넌 잘못된짓을 하고 있다.” 만약 필요하다면(반드시 미봉으로 끝나야 겠지만) 이 두개중에? 혹은 그때 나온 괜찮은것을 사용하면 될것이다. Conclusion그들이 할 수 없었던게 아니라 안하는것이 맞기 때문이었다 라고 믿고 안하기로 했다.내가 MongoDB에 대해 얕게 알고있기에 이를 극복할 수 있는 네이티브한 방법이 있을지도 모를 일이다.이에 혹여 이 글을 읽은 자상한분이 나에게 키워드를 던져주시지 않을까? References https://en.wikipedia.org/wiki/Optimistic_concurrency_control surveyed with gogopg, huey","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://noizbuster.com/tags/mongodb/"},{"name":"nodejs","slug":"nodejs","permalink":"http://noizbuster.com/tags/nodejs/"},{"name":"node","slug":"node","permalink":"http://noizbuster.com/tags/node/"},{"name":"mongoose","slug":"mongoose","permalink":"http://noizbuster.com/tags/mongoose/"},{"name":"transaction","slug":"transaction","permalink":"http://noizbuster.com/tags/transaction/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"authentication-on-msa","slug":"2016-10-31-112249-authentication-on-msa/2016-10-31-112249-authentication-on-msa","date":"2016-10-31T02:22:49.000Z","updated":"2016-11-07T00:06:37.179Z","comments":true,"path":"2016/10/31/2016-10-31-112249-authentication-on-msa/2016-10-31-112249-authentication-on-msa/","link":"","permalink":"http://noizbuster.com/2016/10/31/2016-10-31-112249-authentication-on-msa/2016-10-31-112249-authentication-on-msa/","excerpt":"","text":"목표Micro Service Architecture(MSA) 에 부합하게 Authentication 을 전담하는 서비스를 분리하고 구현하는것을 목표로 한다. 현재의 상황현재 API Gateway 에서 MongoDB 에 저장된 User, Permissions, User Group, Permission Group 에 접근하여 권한이나 조직관리를 할 수 있게 구현되어있다. 나중에 여러가지 References http://nordicapis.com/how-to-control-user-identity-within-microservices/ https://www.quora.com/How-do-I-handle-authentication-in-a-microservices-architecture-with-the-front-end-decoupled-too","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"micro service architecture","slug":"micro-service-architecture","permalink":"http://noizbuster.com/tags/micro-service-architecture/"},{"name":"msa","slug":"msa","permalink":"http://noizbuster.com/tags/msa/"},{"name":"security","slug":"security","permalink":"http://noizbuster.com/tags/security/"},{"name":"authentication","slug":"authentication","permalink":"http://noizbuster.com/tags/authentication/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Handling RESTful API Errors","slug":"2016-09-08-102937-restful-api-error-handling/2016-09-08-102937-restful-api-error-handling","date":"2016-09-08T01:29:37.000Z","updated":"2016-10-27T04:56:07.795Z","comments":true,"path":"2016/09/08/2016-09-08-102937-restful-api-error-handling/2016-09-08-102937-restful-api-error-handling/","link":"","permalink":"http://noizbuster.com/2016/09/08/2016-09-08-102937-restful-api-error-handling/2016-09-08-102937-restful-api-error-handling/","excerpt":"","text":"서론RESTful API를 설계하는데 몇가지 고민거리가 생겼다.Authentication, Clustering, 같은건 구현상의 문제와는 별도로 System 내에서 사용되는 공통 스키마가 있어야 될것 같다.지금 당장 필요하거나 상상되는것은 Global Schema Transaction ID gtxid : Global Transaction ID ltxid : Local Transaction ID Handling Errors Handling Deprecations Survey http://apigee.com/about/blog/technology/restful-api-design-what-about-errors 몇가지 비교 해놨음 https://developers.google.com/drive/v3/web/handle-errors 구글은 이렇게 함. http://blog.restcase.com/rest-api-error-codes-101/ http://www.codingpedia.org/ama/error-handling-in-rest-api-with-jersey/ http://stackoverflow.com/questions/942951/rest-api-error-return-good-practices 구체적인 로직 다이어그램 Schema Design &amp; ConventionCommon Schema (optional) error msg (optional) code (optional) link (optional) deprecated msg (optional) details _metadata gtxid ltxid (optional) msg (response data) Common ConventionDo &amp; Don’t Avoid using plain text response (use JSON or XML) Action PlanRequest Automation adding gtxid, ltxid, operation msg Selective exposure of stack trace or error log by build option Response Detecting error field Detecting deprecate field Boilerplatize Authentication JWT Clustering Process management, Load balance Configuration default.js, docker data volume Docker Deployment Docker Scripts API versioning provide both url, accept-header way Logging using winston or etc. then Filebeat rsyslog file Documentation generate swagger yaml JS doc change log generator ?","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"restful","slug":"restful","permalink":"http://noizbuster.com/tags/restful/"},{"name":"api","slug":"api","permalink":"http://noizbuster.com/tags/api/"},{"name":"rest","slug":"rest","permalink":"http://noizbuster.com/tags/rest/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Docker Swarm Study","slug":"2016-08-18-093029-docker-swarm-study/2016-08-18-093029-docker-swarm-study","date":"2016-08-18T00:30:29.000Z","updated":"2019-01-10T01:57:04.431Z","comments":true,"path":"2016/08/18/2016-08-18-093029-docker-swarm-study/2016-08-18-093029-docker-swarm-study/","link":"","permalink":"http://noizbuster.com/2016/08/18/2016-08-18-093029-docker-swarm-study/2016-08-18-093029-docker-swarm-study/","excerpt":"","text":"Introduction동기이제 슬슬 시스템에 서비스들이 많아지면서 Orchestration을 신경써야 할 필요성이 대두되었다. supervisor 등의 툴을 사용해서 관리하고 있었지만 sigterm을 맞고도 바로 죽지 않는 컨테이너가 있는 등 문제가 다소 있었고, 이것을 dockerfile 에서 해결하거나 entrypoint 를 스크립트로 잡고 인위적으로 내부의 pid를 관리해야 하는것이 부자연스럽다고 생각하던 차였다. Container Orchestration ToolsContainer를 Orchestration 해주는 툴들은 근래에 와서 많이 늘어났다. 8 Container Orchestration Tools to Know 를 보면 주요한 툴들을 잘 설명 해놨다.요약하자면 ECS : Amazon EC2 자체 솔루션 ACS : MS Azure 자체 솔루션 Cloud Foundry’s Diego : 스케쥴러 등과 함께 제공된다. CoreOS Fleet : CoreOS에 최적화된 Docker Management 툴. 자체적으로 클라우드를 구성하는 입장이 된다면 이걸 쓰지 않을까 싶다. Google Container Engine : Google Cloud platform에서 사용함. Kubernetes 를 기반으로 만들어져있다. Kubernetes : Google 에서 만든 컨테이너 매니징툴. 2014년정도엔 이만한게 없었다. Mesosphere Marathon : Apache Mesos 위에서 돌아가는 도커 프레임워크다. Docker Swarm : 하나의 가상 도커 엔진에 여러개의 도커 엔진을 그룹으로 묶어서 운용할 수 있다. 네이티브 클러스터링을 지원한다. 도커팀이 공식적으로 밀고 있는 툴이기 때문에 다른애들은 못하는걸 제공한다. 기술선정일단 소거법으로 접근해보았다. ECS, ACS 등은 특정 서비스 프로바이더에 비인딩 되기 때문에 나중에 다른데로 마이그레이트 할때 비용이 발생하며, 복수의 서비스 프로바이더나 온프로미스를 섞어서 헤테로지니어스한 시스템을 구성하기가 사실상 어렵다.Mesosphere Marathon은 Mesos에 바인드 된다. 우리는 배포시에 ansible 을 쓰기 때문에 이거까지 별도로 올려서 쓸일이 있을까 싶다.Fleet 의 경우엔 역사가 짧고 CoreOS에 바인드 되어서 패스하기로 했다. 이리하여 Kubernates 와 docker swarm 간에서 고민을 하게 되었는데.우리의 경우엔 기존에 있는 바닐라 컨테이너들을 묶어서 한번에 켜는일이 많기 때문에 swarm 이 좀 더 매력적으로 보였고 documentation이 잘 되어있으며, docker 팀에서 밀고있는 툴이기 때문에 유지보수에 관한 걱정도 없었다.물론 kubernates 를 이용하면 성능이나 부하를 파라미터화 해서 엘라스틱하게 운용하기 쉽다는 장점이 있으나 우리의 시스템은 그렇게 고 가용성을 요구하는것도 아니고 클러스터링은 스웜도 네이티브로 지원하기 때문에 손해볼것 없다는 판단을 하였다. Docker Swarm나는 군단이다docs.docker.com/swarm 에 문서화가 잘 되어있다. Installation &amp; Executionbinary를 설치하기 보다는 docker image 를 그냥 시작 하라고 추천하고 있다.swarm 에 기여할게 아니면 전혀 상관이 없는모양 다음 명령어로 원큐에 설치부터 실행까지 된다.1docker run swarm References https://www.quora.com/What-is-the-best-Docker-Linux-Container-orchestration-tool https://www.linux.com/news/5-next-gen-cloud-technologies-you-should-know https://docs.docker.com/swarm/","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://noizbuster.com/tags/docker/"},{"name":"swarm","slug":"swarm","permalink":"http://noizbuster.com/tags/swarm/"},{"name":"container","slug":"container","permalink":"http://noizbuster.com/tags/container/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Expand linux guest's vdi size on linux host","slug":"2016-08-17-111838-expand-vdi-size/2016-08-17-111838-expand-vdi-size","date":"2016-08-17T02:18:38.000Z","updated":"2016-10-27T04:53:02.311Z","comments":true,"path":"2016/08/17/2016-08-17-111838-expand-vdi-size/2016-08-17-111838-expand-vdi-size/","link":"","permalink":"http://noizbuster.com/2016/08/17/2016-08-17-111838-expand-vdi-size/2016-08-17-111838-expand-vdi-size/","excerpt":"","text":"동기처음에 정해진 사이즈 내에서는 vdi의 사이즈가 자동으로 늘어나지만 (기본설정이라면) 그게 넘어가 버리면 용량을 늘리기가 생각보다 귀찮았다.검색해보니 vdi 를 클로닝 하는 방법이랑 vboxmanage 명령어로 늘리는 방법 두가지가 존재했다.난 이중에서 명령어를 사용해서 늘리는 식으로 했다. 방법 우선 VM을 shutdown 해서 끈다. VM 파일이 있는 경로로 이동해서 vdi 파일을 찾는다. vboxmanage modifyhd roconsim-ansible.vdi --resize 30000 식으로 vdi의 사이즈를 바꿔준다. 에러메세지 없이 끝나면 잘 된것이다. resize 옵션 뒤에 붙는 숫자는 MB 단위로 새로운 크기이다. 예를들어 15기가로 잡고 싶으면 15000 과 비슷한 값이 되겠다. ubuntu live 나 gparted live disk 를 넣고 gparted 를 켜서 파티션을 재조정한다. 끈다음 재부팅하면 파티션이 늘어나 있다. 주의 : 스냅샷들을 다 지우고 수행하는것을 추천함.주의 : 귀찮다고 깔려있는 리눅스로 그냥 부팅해서 gparted 로 리사이즈 하려고 하면 늘어나지 않은 용량으로 보이기 때문에 꼭 live cd 로 부팅해서 써야한다. +난 이정도 기능은 virtualbox 자체적으로 ui가 지원해 주리라 기대했는데 아니였다.막상 해보니 시스템 구조상 그럴수도 있겠다 싶기도 하고 OS 마다 다 뭔가 작업을 해주기를 바라는것도 좀 이상하긴 한것 같았다. 해보지 않았지만 검색하다가 같이 나온 자료들을 보면 Guest OS 가 윈도우인 경우에는 부팅 미디어로 부팅하지 않아도 관리도구에 있는 디스크 관리툴로 리사이즈가 잘 되는 모양이다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"virtualbox","slug":"virtualbox","permalink":"http://noizbuster.com/tags/virtualbox/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Angular2 rc5","slug":"2016-08-11-173123-angular2-rc5-study/2016-08-11-173123-angular2-rc5-study","date":"2016-08-11T08:31:23.000Z","updated":"2016-11-01T06:25:13.853Z","comments":true,"path":"2016/08/11/2016-08-11-173123-angular2-rc5-study/2016-08-11-173123-angular2-rc5-study/","link":"","permalink":"http://noizbuster.com/2016/08/11/2016-08-11-173123-angular2-rc5-study/2016-08-11-173123-angular2-rc5-study/","excerpt":"","text":"동기Angular2 rc4가 나왔을때 라우터가 갈려나가는것을 보고 아 이제 좀 고만 고치겠구나 라고 생각했고 이제 슬슬 본격적으로 공부를 해볼까 생각하고 있었는데 얼마안있어 나온 rc5에서 모듈개념이 본격적으로 도입되면서 또 엄청나게 갈려나갔다. 같은 튜토리얼만 지금 몇번째 보는건지모르겠는데 ㅋㅋ 약간 방향을 바꾸어서 변경된 중요포인트를 확인하고 yeoman 과 같은 보일러플레이트를 활용해서 빠르고 아름답게 초기 환경 설정을 하고 간단한 예제를 만드는것을 목표로 공부를 해 보도록 하겠다. 부가목표foundationBootstrap 레이아웃이 난 맘에 별로 안들었다. 대충 만들기엔 정말 쉽고 편하고 좋은데 너무 정형화 되어있다는 느낌을 받았음.그래서 이번 작은 프로젝트에서는 foundation 을 사용해보도록 하겠다. webpack and systemjs패킹툴로 angular2에 systemjs가 webpack으로 바뀐다는 소리를 어디선가 들었다. 그래서 걍 공부도 할겸 둘 다 알아놓기로 하고 webpack이 초미의 관심사니까 사용법을 알아놔야겠다.이미 튜토리얼에도 systemjs는 방법중 하나라고 내용이 바뀌어있는 상태이다. PAUSE자꾸 갈려나가서 Angular 팀의 Milestone 을 보았는데 아직 final release 까지 걸려있는 일들이 엄청 많다는걸 알게되었다.일단 final release 까지는 보류해야겠다. 괜히 mega boilerplate 가 ETA 를 미룬게 아닌거 같다. +updateAngular 2.0 이 이 포스트를 작성하고나서 얼마 안있어 발표되었고2016년 11월 1일 현재 벌써 2.1.1이 나왔고, Mega Boilerplate 는 아직 업데이트를 내놓지 않고있다. 튜토리얼공식 튜토리얼 분량이 얼마 안되니까 그냥 다 보도록 하자.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"angular2","slug":"angular2","permalink":"http://noizbuster.com/tags/angular2/"},{"name":"nodejs","slug":"nodejs","permalink":"http://noizbuster.com/tags/nodejs/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"survey of service discovery in MSA","slug":"2016-08-11-165835-survey-of-service-discovery/2016-08-11-165835-survey-of-service-discovery","date":"2016-08-11T07:58:35.000Z","updated":"2016-10-27T04:48:52.771Z","comments":true,"path":"2016/08/11/2016-08-11-165835-survey-of-service-discovery/2016-08-11-165835-survey-of-service-discovery/","link":"","permalink":"http://noizbuster.com/2016/08/11/2016-08-11-165835-survey-of-service-discovery/2016-08-11-165835-survey-of-service-discovery/","excerpt":"","text":"Service Discovery 의 개념설명 https://dzone.com/articles/service-discovery-in-a-microservices-architecture http://microservices.io/patterns/client-side-discovery.html http://www.mammatustech.com/Microservice-Service-Discovery-with-Consul 주요 프로젝트Jason Wilder’s blog에서 여러가지를 간단하게 정리 해 놓았다. https://github.com/Netflix/eureka https://www.consul.io/ https://github.com/coreos/etcd NginX https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/ https://www.nginx.com/blog/service-discovery-nginx-plus-zookeeper/ zookeeper http://blog.arungupta.me/zookeeper-microservice-registration-discovery/ https://tech.knewton.com/blog/2014/12/eureka-shouldnt-use-zookeeper-service-discovery/ https://github.com/coreos/etcd","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"msa","slug":"msa","permalink":"http://noizbuster.com/tags/msa/"},{"name":"service discovery","slug":"service-discovery","permalink":"http://noizbuster.com/tags/service-discovery/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Javascript Documentation","slug":"2016-07-20-09-51-javascript-documentation/2016-07-20-09-51-javascript-documentation","date":"2016-07-20T00:51:00.000Z","updated":"2016-10-27T04:48:21.783Z","comments":true,"path":"2016/07/20/2016-07-20-09-51-javascript-documentation/2016-07-20-09-51-javascript-documentation/","link":"","permalink":"http://noizbuster.com/2016/07/20/2016-07-20-09-51-javascript-documentation/2016-07-20-09-51-javascript-documentation/","excerpt":"","text":"2016년 가장 널리 사용되는 javascript documentation 은 jsdoc이다. http://usejsdoc.org/ https://github.com/jsdoc3/jsdoc https://meteor.hackpad.com/Automatically-Generating-API-Docs-using-JSDoc-EpPmd2iuFEH#:h=Example:-Class 랜더링 툴은 https://www.npmjs.com/package/jsdoc-to-markdown https://github.com/docstrap/docstrap https://github.com/DBCDK/jsdoc3Template https://github.com/clenemt/docdash https://github.com/kbknapp/clap-rs http://jaguarjs.com/doc/ doc dash가 젤 이뻐보인다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"documentation","slug":"documentation","permalink":"http://noizbuster.com/tags/documentation/"},{"name":"javascript","slug":"javascript","permalink":"http://noizbuster.com/tags/javascript/"},{"name":"jsdoc","slug":"jsdoc","permalink":"http://noizbuster.com/tags/jsdoc/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Javascript Promise","slug":"2016-07-13-08-bluebird-promise/2016-07-13-08-bluebird-promise","date":"2016-07-12T23:00:00.000Z","updated":"2016-10-27T04:47:46.791Z","comments":true,"path":"2016/07/13/2016-07-13-08-bluebird-promise/2016-07-13-08-bluebird-promise/","link":"","permalink":"http://noizbuster.com/2016/07/13/2016-07-13-08-bluebird-promise/2016-07-13-08-bluebird-promise/","excerpt":"","text":"문제Statistics API를 구현하던 도중 여러개의 RESTful API request 들을 하나로 aggregation 해서 리턴을 할 일이 생겼다. 기술선택깔끔하게 구현할 수 있는 방법이 없을까 고민하던중에 promise 가 제공하는 .all 기능이 적합하다고 생각했고, Javascript에서 promise 제공 라이브러리가 여러가지 있다고 정도로만 알고 있었기에 본격적으로 서베이를 시작했다. 관심사는 유명한 q, promise A+, bluebird 세가지였다. 빌트인 구현은 브라우저에서 uncaught error를 silent 처리 해버리기 때문에 디버깅이 어렵다고 하여 제외하기로 하였다. (라이브러리를 사용해도 스펙 자체는 표준에 가깝기 때문에 대부분의 구현들이 compatible 하다.) 여러 의견들을 찾아보았고,https://www.reddit.com/r/javascript/comments/35l3z4/best_promise_library_q_vs_bluebird_vs_jquerys/ 의 맥락으로 보았을때 bluebird 가 적합하다고 판단했다. 구현하나하나의 promise는 이렇게 생겼고http://code.runnable.com/VZozd4IsKAt1U9ua/promises-with-bluebird-for-node-js-request-callback-and-dual-api 이것들의 배열을 promise all 로 구현한다.http://bluebirdjs.com/docs/api/promise.all.html request.js 에서 사용하는 options 생성을","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://noizbuster.com/tags/javascript/"},{"name":"promise","slug":"promise","permalink":"http://noizbuster.com/tags/promise/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"The best practice of builing angular 1.x project","slug":"2016-07-06-angular1.5-survey-best-practice/2016-07-06-angular1.5-survey-best-practice","date":"2016-07-05T15:00:00.000Z","updated":"2016-10-27T04:47:21.891Z","comments":true,"path":"2016/07/06/2016-07-06-angular1.5-survey-best-practice/2016-07-06-angular1.5-survey-best-practice/","link":"","permalink":"http://noizbuster.com/2016/07/06/2016-07-06-angular1.5-survey-best-practice/2016-07-06-angular1.5-survey-best-practice/","excerpt":"","text":"node project 를 시작하기 위해 Megaboiler Plate를 사용해 보긴 했는데나에겐 필요없는 군더더기가 너무 많아서 문제가 좀 있다. 우리에게 필요한건 api interface 이기 때문에 웹 서버위에 쓰기편한 라우터 정도만 올라가 있으면 충분하다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"angular","slug":"angular","permalink":"http://noizbuster.com/tags/angular/"},{"name":"angular1.5","slug":"angular1-5","permalink":"http://noizbuster.com/tags/angular1-5/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"make swagger-ui support multiple specs file","slug":"2016-06-21-14-46-multiple-specs-swagger-ui/2016-06-21-14-46-multiple-specs-swagger-ui","date":"2016-06-21T05:46:00.000Z","updated":"2016-10-27T04:46:41.171Z","comments":true,"path":"2016/06/21/2016-06-21-14-46-multiple-specs-swagger-ui/2016-06-21-14-46-multiple-specs-swagger-ui/","link":"","permalink":"http://noizbuster.com/2016/06/21/2016-06-21-14-46-multiple-specs-swagger-ui/2016-06-21-14-46-multiple-specs-swagger-ui/","excerpt":"","text":"codegen 으로 생성되는 웹서버는 커스터마이징 하는데 한계가 있기 때문에 swagger-ui를 하나 돌리고 여기서 로드해서 보여주는 파일들을 외부파일을 링크하는 방식으로 사용하기로 하였다. 서버에서는 Apache 의 VirtualHost 기능을 이용해서 .json 이나 .yaml 을 static 하게 서브하도록 설정해 놓았다. https://github.com/swagger-api/swagger-ui/issues/1069 https://github.com/swagger-api/swagger-ui/issues/1363 https://gist.github.com/webron/7c41db7f777471fcbc10 의 순서로 제법 괜찮아보이는 해결방법을 찾았다. 이부분만 고쳐주면 되기 때문에 나중에 스펙파일들의 리스트가 있으면 index.html 파일을 빌드타임에 컴파일해서 쓸수도 있을것이다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"msa","slug":"msa","permalink":"http://noizbuster.com/tags/msa/"},{"name":"swagger","slug":"swagger","permalink":"http://noizbuster.com/tags/swagger/"},{"name":"swagger-ui","slug":"swagger-ui","permalink":"http://noizbuster.com/tags/swagger-ui/"},{"name":"openapi","slug":"openapi","permalink":"http://noizbuster.com/tags/openapi/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"make my npm module","slug":"2016-06-21-09-54-make-my-npm-module/2016-06-21-09-54-make-my-npm-module","date":"2016-06-21T00:54:00.000Z","updated":"2016-10-27T04:46:14.195Z","comments":true,"path":"2016/06/21/2016-06-21-09-54-make-my-npm-module/2016-06-21-09-54-make-my-npm-module/","link":"","permalink":"http://noizbuster.com/2016/06/21/2016-06-21-09-54-make-my-npm-module/2016-06-21-09-54-make-my-npm-module/","excerpt":"","text":"기존에 도커 data volume 의 default configuration을 file에 저장하는 용도로 사용했던 코드 조각이 있었는데 이게 여기저기서 사용이 되기 시작해서 유지보수 비용이 증가하게 되었고 때문에 모듈화를 해야겠다고 생각이 되었다.사실 configuration을 도와주는 라이브러리는 있지만 사용상 추구하는 바가 다소 다르기 때문에 커스터마이징을 안할수 없는 상황이어서 (조회가 안되면 디폴트값을 다시 조회하여 error tolerant 를 확보하는 등…) 그냥 새로운 모듈을 만들어서 관리하기 하였다. 어떻게 node module 을 만드는것이 가장 이쁜 방법인지 잘 모르기 때문에 유명한 라이브러리의 소스코드나 세팅 구조를 참고하기로 하였다. https://darrenderidder.github.io/talks/ModulePatterns/#/ https://www.npmjs.com/package/request 라이브러리를 만들고 나서1npm adduser 로 npmjs.com에서 가입한 계정으로 로그인을 하고1npm publish 하면 package.js 안에 있는 정보대로 퍼블리싱이 된다.나의경우 완료됨과 거의 동시에 잘 올라가고 npm install 로 설치도 잘 되었다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://noizbuster.com/tags/nodejs/"},{"name":"npm","slug":"npm","permalink":"http://noizbuster.com/tags/npm/"},{"name":"node","slug":"node","permalink":"http://noizbuster.com/tags/node/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Jenkins2 create pipeline job","slug":"2016-06-14-1420-jenkins2-make-a-job/2016-06-14-1420-jenkins2-make-a-job","date":"2016-06-14T05:20:00.000Z","updated":"2016-10-27T04:42:05.151Z","comments":true,"path":"2016/06/14/2016-06-14-1420-jenkins2-make-a-job/2016-06-14-1420-jenkins2-make-a-job/","link":"","permalink":"http://noizbuster.com/2016/06/14/2016-06-14-1420-jenkins2-make-a-job/2016-06-14-1420-jenkins2-make-a-job/","excerpt":"","text":"환경jenkins server : ubuntu 12.04jenkins : v2.8작업환경 : ubuntu 14.04 사족freestyle job 은 마우스 클릭만 할 줄 알면 기본적인 빌드를 만들 수 있기 때문에 정리가 무색한것 같아서 다음으로 미루도록 하겠다. 동기단계가 복잡하거나 하는 일이 많은 job 의 경우 pipeline job 으로 만드는것이 좋은것 같다.jenkins2 부터는 설치시에 추천 플러그인으로 설치를 해 준다. https://github.com/jenkinsci/pipeline-plugin/blob/master/TUTORIAL.md여기를 시작으로 해보도록 하겠다. 목표내가 필요한것은 git repository로 부터 코드 받기 swagger-codegen 으로 webserver 생성하기 (kind of build) docker image 로 빌드하기 서버에서 이미 돌고 있는 컨테이너 내리기 서버에 이미지를 밀어넣거나 그쪽에서 pull 받아서 실행시키기(이때 포트를 8080이 아닌 다른것으로 설정) 으로 정리된다. swagger-codegen 을 사용해서 웹서버를 생성하는것은 쉘 스크립트로 짜져있는 상태고dockerfile이랑 이것을 이용해서 dockerimage 를 생성 할 수 있는 스크립트도 있다. pipeline 생성하기pipeline 플러그인이 깔려있다면에 표시된 + 버튼 을 눌러서 Build Pipeline Veiw 를 추가하자나중에 다 수정 할 수 있으니 이름정도만 정해주고 넘어가도 된다.tip: 만약 추가중에 취소를 하거나 다른 페이지로 넘어가고 나서 동일한 이름으로 view 를 만드려고 했는데 중복된 이름이라고 나오면서 안될때는 맨위에 검색창에 그 이름으로 검색해서 지우거나 수정하면 된다. Initial JobPipeline 이 시작되는 지점을 정해주어야 한다.-&gt; 만든 Pipeline View을 선택하고 Add Step 을 눌러서 job 을 추가하자. -&gt; 나의 경우 repository 로부터 빌드를 시작하면 되기 때문에 관련 정보를 입력했다. -&gt; 5분마다 polling 해서 바뀐점이 있는지 체크하고 있다면 빌드를 시작하게 된다. Build shell script 로 만들어놨기 때문에 이것을 실행만 하면 된다.Execute shell을 선택하고 sh generate.sh 명령만 덜렁 적어놓았다. -&gt; 저장하고 나서 configure 를 선택하고 -&gt; 방금 만든 job 을 선택하고 저장하면 -&gt; 이렇게 파이프라인이 추가 되었다. Build Docker Image다음 job 을 만드는데 freestyle job 을 만들어서 릴레이 하는지 pipeline 을 만드는건지 잘 모르겠다.freestyle job 으로 만들어서 트리거를 이전작업으로 설정하니까 빌드 파이프라인에 잘 보인다.workspace 는 job 의 이름으로 되어있는 동일 레벨의 디렉토리가 있었고 별 문제없이 access 가 되었다. 만약 문제가 복잡해지거나 서로 비동기적으로 동작한다는것을 가정한다면 custom workspace 를 이용해서 구현해야 할 거 같다. 궁금한건 이전 작업으로 트리거 하는부분을 watch 라고 표현이 되어있는데 이게 스레드 돌면서 dirty check 하는것인지 내부적으로 이벤트 핸들링을 해주는지 모르겠다. 만약 안된다면 첫번째 작업 다음에 다음작업을 예약하는것이 더 효율이 좋을것이라고 생각된다. 우선 Docker build step plugin 을 설치한다.이렇게 했는데 에러를 뿜으면서 제대로 빌드가 안된다.https://github.com/jenkinsci/docker-plugin/issues/389 한계가 있어보인다.native CLI atm을 쓰는게 더 나을거라는 말을 해주는데 뭔지 모르겠음. 일단은 docker image build 대신 ssh 로 artifact 를 서버로 밀어넣고 실행시켜 보겠다. 새로운 freestyle job 을 하나 만들고 빌드에서 shell cmd 로 먼저 처리를 한다.123456echo copy artifact from previous stepls ./../api-spec-swaggercp ./../api-spec-swagger/bin . -rls -alsed -i &apos;s/8080/13981/g&apos; ./bin/api_spec/index.jscat ./bin/api_spec/index.js 로 다른 workspace 에서 파일을 복사 해 온다음 내부에 8080 포트를 13981로 변경해주었다. 이제 ssh로 접속해서 파일들을 복사해주고123456cd api_swaggercd bincd api_specnpm installpm2 stop indexpm2 start index.js ssh로 다음 명령어를 실행해서 서버에서 실행시킨다.pm2 node processor manager 로 name 으로 프로세서 관리를 편하게 해 pipeline script 작성123node &#123; git url: &apos;https://github.com/user/reponame.git&apos;&#125;","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"http://noizbuster.com/tags/jenkins/"},{"name":"jenkins2","slug":"jenkins2","permalink":"http://noizbuster.com/tags/jenkins2/"},{"name":"ci","slug":"ci","permalink":"http://noizbuster.com/tags/ci/"},{"name":"cd","slug":"cd","permalink":"http://noizbuster.com/tags/cd/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Jenkins2 설치 및 구성 (docker)","slug":"2016-06-14-1000-jenkins2-setup/2016-06-14-1000-jenkins2-setup","date":"2016-06-14T01:00:00.000Z","updated":"2016-10-27T04:42:20.219Z","comments":true,"path":"2016/06/14/2016-06-14-1000-jenkins2-setup/2016-06-14-1000-jenkins2-setup/","link":"","permalink":"http://noizbuster.com/2016/06/14/2016-06-14-1000-jenkins2-setup/2016-06-14-1000-jenkins2-setup/","excerpt":"","text":"설치Jenkins2 를 설치한다 docker 이미지를 제공하니까 이걸 쓰도록 한다.20160614 현재 최신버전은 2.8https://hub.docker.com/r/jenkinsci/jenkins/tags/ 1234sudo docker run \\ -p 13980:8080 \\ -d \\ jenkinsci/jenkins 로 실행컨테이너의 8080 포트를 13980으로 바인드 한다. 초기 설정http://my-ip:13980 로 접속하면/var/jenkins_home/secrets/initialAdminPassword 으로 들어가서초기 비밀번호를 입력하라는 화면을 보게 된다. 도커의 shell 에 붙어서 파일을 읽으면 된다.sudo docker exec -ti containdername bash 로 쉘에 붙자cat /var/jenkins_home/secrets/initialAdminPassword 으로 확인할 수 있다. 다음은 이런 화면인데 Install suggested plugins 를 선택하면 된다나중에 필요한 플러그인은 나중에 언제라도 설치할 수 있기 때문에 망설일 필요 없다. 그러면 젠킨스 씨가 이렇게 열심히 기본 플러그인을 깔아준다. 초기 계정을 하나 만들어주자, 만약 회사나 단체라면 관리자 계정을 만든다고 생각하면 된다.나중에 내가 쓸 계정은 따로 만들어서 쓰는게 관리상 편할것이다.Manage Jenkins -&gt; Manage Users -&gt; Create User 에서 다른 유저를 만들수 있고Manage Users 메뉴에서 상세 설정할 수 있다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://noizbuster.com/tags/docker/"},{"name":"jenkins","slug":"jenkins","permalink":"http://noizbuster.com/tags/jenkins/"},{"name":"jenkins2","slug":"jenkins2","permalink":"http://noizbuster.com/tags/jenkins2/"},{"name":"ci","slug":"ci","permalink":"http://noizbuster.com/tags/ci/"},{"name":"cd","slug":"cd","permalink":"http://noizbuster.com/tags/cd/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"webstorm에서 node관련 함수들을 찾을수 없다고 나올때 해결법","slug":"2016-05-25-webstorm-node-integration/2016-05-25-webstorm-node-integration","date":"2016-05-24T15:00:00.000Z","updated":"2016-10-27T04:40:54.899Z","comments":true,"path":"2016/05/25/2016-05-25-webstorm-node-integration/2016-05-25-webstorm-node-integration/","link":"","permalink":"http://noizbuster.com/2016/05/25/2016-05-25-webstorm-node-integration/2016-05-25-webstorm-node-integration/","excerpt":"","text":"Webstorm에서 node등을 지원한다고 하는데 빨간줄이 죽죽 그어져있는 모습이 보이곤한다. 설정을 좀 해줘야한다. 설정으로 가서 Language &amp; Frameworks &gt; Node.js and NPM 으로가서Code Assistance 를 Enable 해주면 된다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://noizbuster.com/tags/nodejs/"},{"name":"webstorm","slug":"webstorm","permalink":"http://noizbuster.com/tags/webstorm/"},{"name":"ide","slug":"ide","permalink":"http://noizbuster.com/tags/ide/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"python 프로젝트에 virtualenv 적용하고 사용하기","slug":"2016-05-24-python-virtualenv/2016-05-24-python-virtualenv","date":"2016-05-23T15:00:00.000Z","updated":"2016-10-27T02:24:14.222Z","comments":true,"path":"2016/05/24/2016-05-24-python-virtualenv/2016-05-24-python-virtualenv/","link":"","permalink":"http://noizbuster.com/2016/05/24/2016-05-24-python-virtualenv/2016-05-24-python-virtualenv/","excerpt":"","text":"What is the virtualenv프로젝트의 의존성 관리를 할 때 nodejs 의 경우 nasty dependency 라서 디렉토리 독립적으로 운용 가능하지만 파이선은 라이브러리가 시스템에 설치되기 때문에 디펜던시의 버전관리가 어려운 문제가 있으며 복수의 서로 다른 디펜던시를 가진 프로젝트를 운용하는데도 문제가 있다.이를 해결하기 위한 방법으로 virtualenv 라는 파이선 패키지가 제공되고 있고 이를 사용하는 방법에 대해서 알아보겠다. Installationsudo pip install virtualenvsudo -H pip install virtualenv virtual environment 모드로 변경virtualenv dependency: virtual enviroment 생성, dependency 디렉토리가 생김.dependency/activate: Reference http://pythoninreal.blogspot.kr/2013/12/virtualenv.html","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"python","slug":"python","permalink":"http://noizbuster.com/tags/python/"},{"name":"virtualenv","slug":"virtualenv","permalink":"http://noizbuster.com/tags/virtualenv/"},{"name":"package management","slug":"package-management","permalink":"http://noizbuster.com/tags/package-management/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"actionhero로 API Gateway 구축하기","slug":"2016-05-17-actionhero-api-gateway-worklog/2016-05-17-actionhero-api-gateway-worklog","date":"2016-05-16T15:00:00.000Z","updated":"2016-10-27T02:20:12.622Z","comments":true,"path":"2016/05/17/2016-05-17-actionhero-api-gateway-worklog/2016-05-17-actionhero-api-gateway-worklog/","link":"","permalink":"http://noizbuster.com/2016/05/17/2016-05-17-actionhero-api-gateway-worklog/2016-05-17-actionhero-api-gateway-worklog/","excerpt":"","text":"서론라이선스 문제 때문에 LoopBack이 거슬려서 찾아보니 Action Hero 라는걸 찾았다.http://www.actionherojs.com/ 일단 기본적으로 나에게 필요한 기능은 다 있는것처럼 보인다. Reusability Scalability(Clustering) RestfulAPI 얘는 독특하게 Web, WebSocket 뿐만 아니라 Socket 도 지원을 한다. 1234npm install actionhero./node_modules/.bin/actionhero generatenpm installnpm start 이렇게 설치하고 초기화하고 시작할 수 있다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"},{"name":"micro service architecture","slug":"micro-service-architecture","permalink":"http://noizbuster.com/tags/micro-service-architecture/"},{"name":"msa","slug":"msa","permalink":"http://noizbuster.com/tags/msa/"},{"name":"actionhero","slug":"actionhero","permalink":"http://noizbuster.com/tags/actionhero/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"loopback으로 API Gateway 구축하기","slug":"2016-05-16-loopback-api-gateway-worklog/2016-05-16-loopback-api-gateway-worklog","date":"2016-05-14T15:00:00.000Z","updated":"2016-10-27T02:20:04.474Z","comments":true,"path":"2016/05/15/2016-05-16-loopback-api-gateway-worklog/2016-05-16-loopback-api-gateway-worklog/","link":"","permalink":"http://noizbuster.com/2016/05/15/2016-05-16-loopback-api-gateway-worklog/2016-05-16-loopback-api-gateway-worklog/","excerpt":"","text":"서론Micro Service Architecture 에 대해서는 다음 링크에 조대협님이 쉽게 잘 설명해주셨다.조대협의 블로그 - 마이크로 서비스 아키텍쳐 (MSA의 이해) 이번 포스팅에서는 Loopback을 사용할것이다.Loopback 은 IBM의 자회사인 StrongLoop가 만든 API Gateway 미들웨어이다Loopback.io 에서 문서들과 예제들을 확인 할 수 있다. 설치와 초기 세팅1sudo npm install -g strongloop 설치가 끝나면 프로젝트 디렉토리를 하나 만들고 slc loopback 명령어로 프로젝트를 생성한다.123mkdir project-namecd project-nameslc loopback 그러면 yeoman이 트리거되고 설치가 시작된다. 과정중에 프로젝트 이름, 디렉토리 이름, 보일러플레이트의 타입 등을 고르라고 프로그램이 물어볼것이다. 나는 project name enter (accept default value) hello_world 선택 순으로 대답했다. 완료되면 다음과 같은 안내를 받는다.12345678910111213Next steps: Change directory to your app $ cd project-name Create a model in your app $ slc loopback:model Compose your API, run, deploy, profile, and monitor it with Arc $ slc arc Run the app $ node . 시키는대로 slc:loopback:model 명령어로 모델을 하나 만들어보자12345678910111213141516171819slc loopback:model? Enter the model name: proj? Select the data-source to attach undefined to: (no data-source)? Select model&apos;s base class PersistedModel? Expose proj via the REST API? Yes? Custom plural form (used to build REST URL): proj? Common model or server only? serverLet&apos;s add some proj properties now.Enter an empty property name when done.? Property name: version invoke loopback:property? Property type: string? Required? Yes? Default value[leave blank for none]: 0.0.1Let&apos;s add another proj property.Enter an empty property name when done.? Property name: 잘 만든것인지 판단이 안선다. 아무렴 어때 나중에 바꿀수 있겠지 그다음, 위에서 시켰던대로 slc loopback:arc 로 web-ui 툴을 켠다.StrongLoop Arc is running here: http://localhost:57649/#/나의 경우 57649 포트에 열렸다.난감하다 뭔가 계정을 생성한 기억은 없는데…알아보니 이 계정은 로컬계정이 아니다 strongloop에서 가입을 해야한다. 이부분은 솔직히 맘에 안든다. arc 툴을 유료로 전환할 여지를 주는것인지, 내 API Gateway의 설정을 수집하겠다는것인지 모르겠지만 내가 example 만 보고 진행함에 있어서 이 내용에 대해 읽은것이 없었기 때문에 오해의 소지가 있다.그럼 이걸 어찌해야할까? 일단은 arc 를 사용하지 않고 그냥 CLI 와 에디터로 해결 해 보도록 하겠다. 그럼 실행을 해보자123node .ornpm start 로 실행하면 된다. localhost:3000/explorer 로 붙으면 현재 만들어져있는 api list 들을 볼 수 있다. 적용기존에 있는걸 사용하기 위해서 레거시 API server에 있는걸 하나 redirection 해서 써 보자. 이거만 가능하면 적어도 여러개의 포트에서 오는걸 하나로 합치는건 웹서버 밑에다가 express 라우팅을 할 필요는 없어진다. 일단, Express의 router 를 그대로 써서 물릴수가 있다. 이건 기존에 있던 express 레거시 라우터를 마이그레이션 할 때 쓰면 되겠다. 그 이외엔 datasource 를 만들어서 기존의 REST를 가져올 수 있다. 일단은 GET request 만 알아보았는데.slc loopback:datasource 를 이용해서 생성하면 되고 커넥터를 REST로 선택하면 된다.이후 생성된 파일을strongloop/loopback-example-connector/REST의 예제처럼 수정해주면 된다. 라이선스Loopback의 많은 부분들이 듀얼라이선스를 사용하고있다. MIT 와 자기네들이 만든 StrongLoop Subscription Agreement. 라는걸 사용한다. 따로 조건이 없기 때문에 둘중에 원하는걸 선택해서 사용해도 (아마도 MIT를) 합법이다. 하지만 문제는 Loopback 전부가 다 듀얼라이선스가 아니라는점이다. API connect 의 경우에는 듀얼라이선스가 아니라 StrongLoop Subscription Agreement만 명기되어있고 DB커넥터의 과반수도 그렇다. 이런경우에는 사용상에 제약이 생긴다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"},{"name":"micro service architecture","slug":"micro-service-architecture","permalink":"http://noizbuster.com/tags/micro-service-architecture/"},{"name":"msa","slug":"msa","permalink":"http://noizbuster.com/tags/msa/"},{"name":"loopback","slug":"loopback","permalink":"http://noizbuster.com/tags/loopback/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"실수로 한 apt-get autoremove 수습하기","slug":"2016-05-10-covering-autoremove-mistake/2016-05-10-covering-autoremove-mistake","date":"2016-05-09T15:00:00.000Z","updated":"2016-10-27T05:17:04.251Z","comments":true,"path":"2016/05/10/2016-05-10-covering-autoremove-mistake/2016-05-10-covering-autoremove-mistake/","link":"","permalink":"http://noizbuster.com/2016/05/10/2016-05-10-covering-autoremove-mistake/2016-05-10-covering-autoremove-mistake/","excerpt":"","text":"python3.5 를 설치하다가 3.4를 삭제한 상태에서 실수로 autoremove 를 하여 python3.4 와 의존성을 가지던 패키지들이 다 날아가서 네트워크도 안되고 난장판이었다. 재부팅하니 GUI도 쓸수 없었다. network 복구ctrl+alt+F1 으로 터미널1에 붙어서 작업을 한다.1sudo vi /etc/network/interfaces 에 다가 네트워크 정보를 박아주고ifconfig 나 iwconfig등으로 네트워크를 수동으로 잡아주거나 해서 네트워크를 연결시킨다. 손실된 패키지 솎아내서 복구일단 apt-get 의 로그를 찾아야겠다 뭔가 아주 많이 지워졌는데 어디부터 날아갔는지 피해산정이 중요하다.1vi /var/log/dpkg.log | less 에 내용을 보면 1234567891011121314151617182016-05-10 08:26:02 status installed ruby2.3:amd64 2.3.1-1bbox1~trusty12016-05-10 08:26:02 trigproc libc-bin:amd64 2.19-0ubuntu6.7 &lt;none&gt;2016-05-10 08:26:02 status half-configured libc-bin:amd64 2.19-0ubuntu6.72016-05-10 08:26:02 status installed libc-bin:amd64 2.19-0ubuntu6.72016-05-10 08:26:03 startup packages remove2016-05-10 08:26:03 status installed linux-image-extra-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.12016-05-10 08:26:03 remove linux-image-extra-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.1 &lt;none&gt;2016-05-10 08:26:03 status half-configured linux-image-extra-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.12016-05-10 08:26:03 status half-installed linux-image-extra-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.12016-05-10 08:26:35 status config-files linux-image-extra-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.12016-05-10 08:26:35 status config-files linux-image-extra-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.12016-05-10 08:26:35 status installed linux-image-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.12016-05-10 08:26:35 remove linux-image-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.1 &lt;none&gt;2016-05-10 08:26:35 status half-configured linux-image-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.12016-05-10 08:26:49 status half-installed linux-image-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.12016-05-10 08:26:50 status config-files linux-image-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.12016-05-10 08:26:50 status config-files linux-image-3.19.0-56-generic:amd64 3.19.0-56.62~14.04.12016-05-10 08:34:49 startup archives unpack 이런 데이터가 있다. 우리가 필요한건 이중에서 오늘 날자로 되어있는 remove 로 시작하는 애들인데2016-05-10 ..:..:.. remove 로 검색되는 행을 남기고 모두 지운다음 이처럼 정규식으로 패키지 이름만 남기면 되겠다. 이렇게 얻은 패키지 목록을 apt-get install 뒤에 붙여주고 설치하면 끝","categories":[{"name":"design","slug":"design","permalink":"http://noizbuster.com/categories/design/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://noizbuster.com/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://noizbuster.com/tags/ubuntu/"},{"name":"os","slug":"os","permalink":"http://noizbuster.com/tags/os/"},{"name":"apt","slug":"apt","permalink":"http://noizbuster.com/tags/apt/"}],"keywords":[{"name":"design","slug":"design","permalink":"http://noizbuster.com/categories/design/"}]},{"title":"Python WebServer Survey for API Server","slug":"2016-05-09-python-web-platform-survey/2016-05-09-python-web-platform-survey","date":"2016-05-08T15:00:00.000Z","updated":"2016-11-07T00:16:11.471Z","comments":true,"path":"2016/05/09/2016-05-09-python-web-platform-survey/2016-05-09-python-web-platform-survey/","link":"","permalink":"http://noizbuster.com/2016/05/09/2016-05-09-python-web-platform-survey/2016-05-09-python-web-platform-survey/","excerpt":"","text":"Restful API 서버를 구현해야 할 문제가 있다. 요구조건은 다음과 같다. Restful API가 구현 가능해야한다. WebSocket 구현이 용이해야 한다. Scalability 가 좋으면 더욱좋다. Response time 이 짧으면 좋다. Python 이면 좋다. Flask사용자가 많아서 커뮤니티 서포트가 좋지만 달려있는게 많기 때문에 상대적으로 아주 무겁고 response time이 상당히 길다는 문제가 있다. 플랫폼을 meinheld 로 바꾸고 나서 많이 빨라졌다. plain text serve 의 경우 아예 퍼포먼스가 좀 느리가 느리다 nodejs 에 비해 7배정도 차이가 있음. 하지만 API server 의 경우에는 single query를 빠르게 반복하는일이 오히려 많기 경우에 plain text 는 신경쓰지 않아도 된다. content-type 을 text/plain 으로 주는행위만 하지 않으면 된다.webSocket 을 구현하기 제일 편하다. Falcon미니멀한 구현이기 때문에 제일 빠르게 구현 할 수 있다.스케일링도 문제없고 RestfulAPI을 구현하는데 필요한것은 다 포함되어있다.대신 webSocket 을 구현하려면 상당히 지저분해진다. BottleFlask 와 Falcon의 중간정도 성능과 편의성을 보인다. 커뮤니티가 그렇게 큰 것 같지는 않아보인다. PyramidFalcon 에 기능들이 좀 더 추가된 형태이고 성능은 2배정도 느리다하지만 Flask 에 비해 3배 빠르며 response time 문제가 없다.자잘한 기능들이 더 많긴 하지만 Falcon 에 있는 기능만으로도 충분 하기 때문에이 문제에 한해서는 이점을 갖는다고 보기 힘들다.마찬가지로 webSocket 을 구현하려면 상당히 지저분해진다. 공통사항Bottle 로 Websocket을 구현하는 방법에 대한 안내가 있는데이게 wsgi에 웹소켓 기능을 로드해서 쓰는것으로 보인다. get 을 가져오는 Request 는 bottle 에서 나오는것이다. 아마 wsgi를 사용하는 다른 플랫폼에서도 webSocket을 쓸 수 있겠지만 난이도가 어떨지는 좀 알아봐야겠다. 결론오래되고 안정되기는 Django의 손을 들어 줄 수도 있지만. flask도 커뮤니티가 아주 활발하며 안정화를 많이 거쳤기 때문에 근래에 와선 규모나 지원에 대해서는 별로 차이가 없어보인다.벤치마크에 따르면 성능은 Django보다 flask가 더 잘 나오고 코드스니펫도 많이 정리되어있다. 다만 flask-pypy 처럼 사용하면 퍼포먼스가 상당히 떨어지고content-type 이 plain/text 인 경우도 피해야 한다. 확실히 속도는 Falcon, Bottle 이 더 유리한면도 있긴 하지만 커뮤니티 서포트나 생산성면에서 감수할 정도로 큰 차이는 아닌것으로 판단한다. Reference https://www.techempower.com/benchmarks/#section=data-r12&amp;hw=peak&amp;test=db&amp;p=1lc-e8s-0 http://stackoverflow.com/questions/10316374/bottle-websocket","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"python","slug":"python","permalink":"http://noizbuster.com/tags/python/"},{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Python Flask 로 RestfulAPI 서버 만들기","slug":"2016-05-09-building-flask-api-server-log/2016-05-09-building-flask-api-server-log","date":"2016-05-08T15:00:00.000Z","updated":"2016-11-07T00:12:32.175Z","comments":true,"path":"2016/05/09/2016-05-09-building-flask-api-server-log/2016-05-09-building-flask-api-server-log/","link":"","permalink":"http://noizbuster.com/2016/05/09/2016-05-09-building-flask-api-server-log/2016-05-09-building-flask-api-server-log/","excerpt":"","text":"목표목표는 RestfulAPI 서버를 만드는것이다.요구조건은, WebSocket 을 구현해야 할 수도 있다는 점이고.단발성의 API콜이 비주기적으로 많이 들어올수 있다는것.되도록이면 Response Time 은 짧은것이 좋다는것.Redis 를 캐시로 써서 리턴한다는점이다. 시작난 잘 만들어진 보일러플레이트로 시작을 하는것이 좋겠다.https://github.com/vovantics/flask-bluebone 문서화가 잘 되어있고 authentication 도 구현되어있다.메인테이너가 한명이고 이슈란에 아무것도 없다는게 마음에 좀 걸리는데 리드미에 이렇게 구현한 이유에 대해서 나름대로 설명을 달아놨기 때문에 공부하기에는 좋아보인다.이메일이라던지 스테틱파일 서브와 같은 이번 목적이랑 상관없는것들도 포함되어있는데 걷어내면 되니까 일단은 신경쓰지 않는다. fabric 이라는걸로 deploy 하는것으로 보이는데 Reference https://github.com/vovantics/flask-bluebone https://github.com/flask-restful/flask-restful/","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"},{"name":"python flask","slug":"python-flask","permalink":"http://noizbuster.com/tags/python-flask/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Noizbuster Logo Design","slug":"2016-04-30-noizbuster-logo-design/2016-04-30-noizbuster-logo-design","date":"2016-04-29T15:00:00.000Z","updated":"2016-10-27T05:17:24.035Z","comments":true,"path":"2016/04/30/2016-04-30-noizbuster-logo-design/2016-04-30-noizbuster-logo-design/","link":"","permalink":"http://noizbuster.com/2016/04/30/2016-04-30-noizbuster-logo-design/2016-04-30-noizbuster-logo-design/","excerpt":"","text":"로고 사이즈를 정하는데 보통 가이드라인들은 300px 로 한다 아이콘으로는 구글 플레이에서 요구하는 가장큰 아이콘은 512*512안드로이드 아이콘 사이즈는 48 px, 72 px, 96 px, 144 px, 192 px 로고 사이즈는 300x300 에 가로나 세로를 맞춰서다른 사이즈로는 150px, 96px, 64px, 32px, 16px로 만들면 된다. reference","categories":[{"name":"design","slug":"design","permalink":"http://noizbuster.com/categories/design/"}],"tags":[{"name":"noizbuster","slug":"noizbuster","permalink":"http://noizbuster.com/tags/noizbuster/"},{"name":"logo","slug":"logo","permalink":"http://noizbuster.com/tags/logo/"},{"name":"design","slug":"design","permalink":"http://noizbuster.com/tags/design/"},{"name":"diy","slug":"diy","permalink":"http://noizbuster.com/tags/diy/"}],"keywords":[{"name":"design","slug":"design","permalink":"http://noizbuster.com/categories/design/"}]},{"title":"Stemcell 기획","slug":"2016-04-28-Stemcell/2016-04-28-Stemcell","date":"2016-04-27T15:00:00.000Z","updated":"2016-10-27T05:17:23.283Z","comments":true,"path":"2016/04/28/2016-04-28-Stemcell/2016-04-28-Stemcell/","link":"","permalink":"http://noizbuster.com/2016/04/28/2016-04-28-Stemcell/2016-04-28-Stemcell/","excerpt":"","text":"동기jekyll을 비롯하여 StaticGen을 이용하여 블로그나 웹페이지를 빌드해주는 엔진들을 사용해 보았는데, 맘에 안드는것이 좀 있었다. front matter 로 사용하는것들이 일관성이 없을뿐더러 .md 파일 자체만 preview 하는경우에 전혀 본문의 일부처럼 보이지 않는다. Static Page 를 빌드하고 나서의 상대 이미지의 경로 문제 front matter 의 경우 그나마 중간에 개행을 추가한 yml 포멧은 md 를 html로 컴파일 했을때 보기에 좀 나아서 사용하고 있지만. 이것역시 다른 엔진이나 테마로 넘어가기엔 호환성이 떨어진다는 문제가 있다(모든 파일을 다시 수정해야한다는 이야기). 이미지 경로의 경우 나같은 경우 아톰의 img-paste 플러그인으로 md 파일안에 이미지를 링크하는데 이것은 .md 파일과 같은곳에 저장되며 상대경로로 .md 파일안에 링크가 된다. 그런데 staticGen 으로 빌드한 static page 의 경우 destination directory 에 저장된 html 파일과 원본 이미지 파일과의 위치가 다르기 때문에 링크가 죄다 깨지는 문제가 있다.이를 해결하기 위해서는 Destination 디렉토리로 .md 파일내부의 상대경로를 수정하는 일종의 compile 과정을 거치게 하거나 image file 들을 destination directory 로 복사 해 주는 과정이 필요하다. 난 테마나 빌드엔진을 바꿀때 컨텐츠파일의 대부분을 재작성하는것을 원하지 않고, 포스트가 디렉토리 단위로 관리가 되었으면 하는 마음이 있다.그래서 정형화된 디렉토리와 파일이름으로 포스트를 작성했을때 이것을 jekyll과 같은 staticGen엔진이 빌드 할 수 있도록 다시 포매팅 해주는 전처리기를 만드려고 한다.본 포스트에서는 러프하게 그 계획을 세워보겠다. Design Plan design directory structure design front-matter load mechanism change image path to destination DesignDirectory structure designcategoryName = NNNN-namearticleName = yyyyMMddhhmmss-title hhmmss is optional blogRoot/categoryName/articleName/ check existence of front-matter.yml","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"rust","slug":"rust","permalink":"http://noizbuster.com/tags/rust/"},{"name":"stemcell","slug":"stemcell","permalink":"http://noizbuster.com/tags/stemcell/"},{"name":"staticgen","slug":"staticgen","permalink":"http://noizbuster.com/tags/staticgen/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Converting .OVA to docker image","slug":"2016-04-20-ova-to-dockerimg/2016-04-20-ova-to-dockerimg","date":"2016-04-19T15:00:00.000Z","updated":"2016-10-27T05:14:35.171Z","comments":true,"path":"2016/04/20/2016-04-20-ova-to-dockerimg/2016-04-20-ova-to-dockerimg/","link":"","permalink":"http://noizbuster.com/2016/04/20/2016-04-20-ova-to-dockerimg/2016-04-20-ova-to-dockerimg/","excerpt":"","text":"0.서론도커 이미지를 만드는것은 그리 어렵지 않았다. 근데 지금 쓰고있는 VM을 docker image 로 바꿔서 실행하면서버나 시뮬레이터를 좀 더 편하게 만들고 실행할때는 속도가 더 빠를것이라고 기대했다.VM 툴들은 스냅샷도 지원하니까 버전관리도 할 수 있다. 물론 도커 이미지를 다른 이미지를 베이스로 하여 올리는것보다는 빌드에 시간도 많이 걸리고실행시에 엔트리 포인트도 정해 줘야 할 것 같은 불길한 예감이 들지만 뭐 어떠한가! 빠른데! 1. Extracting .vmdk from VM (.OVA)우선 Virtual machine to docker image 따위의 키워드로 구글링 해보니.vmdk 를 docker .img 로 변환하는 방법이 제시되어있었다. 근데 문제는 내 vm 은 vmdk 가 아니라 vdi를 이용하고 있어서 써먹을수 없는 방법이라는건데검색해보니 VM을 아카이브할때 나오는 OVA 파일 내부에 vmdk가 포함되어있다는것을 알게되었다. 원하는 VM을 OVA 파일로 아카이브 한 후에 123 tar -tf [MY_VM].ova[MY_VM].ovf[MY_VM]-disk1.vmdk 내부에 vmdk 파일이 들어있음을 확인 할수 있다. 1 tar -xvf [MY_VM].ova 압축을 풀어준다. 용량에 따라 시간이 제법 걸릴수도 있다. 2. Converting .vmdk to docker image얻게된 [MY_VM]-disk1.vmdk 파일을 가지고 docker image 를 만들어보자.우선 큐에무가 있어야 한다. sudo apt-get install qemu1 qemu-img convert -f vmdk -O raw [MY_VM]-disk1.vmdk [MY_OUT].img 성공! 근데 용량이 40기가에 육박한다… 3. Running docker image용량이 너무 크지만 그래도 이왕 만든거 돌려는 봐야겠다. 12 sudo docker load -i [MY_OUT].img sudo docker run -ti [MY_OUT] bash 참고 : ova to vmdkhttp://edoceo.com/notabene/ova-to-vmdk-to-qcow2 vmdk to docker imagehttp://stackoverflow.com/questions/31321076/convert-vagrant-box-to-docker-image","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://noizbuster.com/tags/docker/"},{"name":"vm","slug":"vm","permalink":"http://noizbuster.com/tags/vm/"},{"name":"virtualbox","slug":"virtualbox","permalink":"http://noizbuster.com/tags/virtualbox/"},{"name":"ova","slug":"ova","permalink":"http://noizbuster.com/tags/ova/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"css 넘치는 text 줄임말로 처리하기","slug":"2016-04-12-handling-text-overflow-in-responsivedesign/2016-04-12-handling-text-overflow-in-responsivedesign","date":"2016-04-11T15:00:00.000Z","updated":"2016-11-07T02:18:58.803Z","comments":true,"path":"2016/04/12/2016-04-12-handling-text-overflow-in-responsivedesign/2016-04-12-handling-text-overflow-in-responsivedesign/","link":"","permalink":"http://noizbuster.com/2016/04/12/2016-04-12-handling-text-overflow-in-responsivedesign/2016-04-12-handling-text-overflow-in-responsivedesign/","excerpt":"","text":"문제div 나 span 내부에 있는 텍스트들이 너무 길어서 칸 밖으로 나갈때 잘라내거나 ... 등으로 줄임표시 하고 싶은 경우가 있다. responsive 하게 디자인되지 않은 경우에는 대게 width가 px로 정의되기 때문에 text-overflow 옵션을 조정하여 해결할할 수 있으나. 엘리먼트의 크기가 percentage 와 같이 상대적인 크기로 정의되어있을때는 제대로 동작하지 않는다는 문제가 있다. 시도해본것123456p &#123; white-space: nowrap; width: 100%; overflow: hidden; /* \"overflow\" value must be different from \"visible\" */ text-overflow: ellipsis;&#125; 1float:left; 해결방법123456.ellipsis &#123; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; display: block;&#125; CSS 를 추가해주면 잘 동작한다… 이유는 모르겠음","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"},{"name":"css","slug":"css","permalink":"http://noizbuster.com/tags/css/"},{"name":"markup","slug":"markup","permalink":"http://noizbuster.com/tags/markup/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Commonmark의 방향에 대한 사견","slug":"2016-04-04-commonmarks-direction/2016-04-04-commonmarks-direction","date":"2016-04-04T04:17:00.000Z","updated":"2016-10-27T05:17:21.763Z","comments":true,"path":"2016/04/04/2016-04-04-commonmarks-direction/2016-04-04-commonmarks-direction/","link":"","permalink":"http://noizbuster.com/2016/04/04/2016-04-04-commonmarks-direction/2016-04-04-commonmarks-direction/","excerpt":"","text":"markdown 의 variation이 난립함에 따라 표준화에 대한 요구가 떠올랐고John Gruber 와 커뮤니케이션을 거쳐 (다소 시끌했지만) commonmark 가 총대를 매고 나타났다. 현재까지 스펙이 0.25 버전까지 올라왔고 업데이트 주기도 길어지고 있다. 하지만 table 이나 code highlight 에 관한 이야기가 아주 활발히 일어나고 있음에도 불구하고 스펙에 들어갈 기미는 보이지 않는다. 다만 extended 기능으로 추가해서 쓰는게 어떠하냐는 이야기뿐. 나 역시 너무 많은 기능이 commonmark에 포함되어 진입장벽을 높이거나 하는것엔 동의하지 않지만 github flavor의 table 이나 code highlight support 같은경우엔 매우 직관적이며 진입장벽을 높이지 않는다고 생각한다. 오히려 예약기호들과 본문간의 공백문제(e.g. ‘## title’ 과 ‘##title’)나 여러 부호를 복수로 인정하는 경우 (e.g. bolic 에 ‘*’ 과 ‘__’ 혹은 list 의 와 -) 가 오히려 혼란을 주고 있다는게 내 생각이다. 이렇게 된 이상 UnderscoreJS의 Underscore-contrib 처럼 같이 공식 확장을 제공하는것이 좋지 않을까 싶다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"commonmark","slug":"commonmark","permalink":"http://noizbuster.com/tags/commonmark/"},{"name":"markdown","slug":"markdown","permalink":"http://noizbuster.com/tags/markdown/"},{"name":"documentation","slug":"documentation","permalink":"http://noizbuster.com/tags/documentation/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"똑똑하게 서버사이드 폴링 하기","slug":"2016-04-04-serverside-polling/2016-04-04-serverside-polling","date":"2016-04-04T01:54:00.000Z","updated":"2016-10-27T05:13:46.851Z","comments":true,"path":"2016/04/04/2016-04-04-serverside-polling/2016-04-04-serverside-polling/","link":"","permalink":"http://noizbuster.com/2016/04/04/2016-04-04-serverside-polling/2016-04-04-serverside-polling/","excerpt":"","text":"Comet과 LongPolling웹에서 데이터를 폴링하기 위한 개념으로 comet 이라는 모델이 제시되어있다.이것을 구현하는 방법중 하나가 롱 폴링이다. comet 에 대한 설명 https://en.wikipedia.org/wiki/Comet_(programming)한글로 된 간략한 설명http://egloos.zum.com/genes1s/v/2699984 요약하자면 단발성으로 http request 를 하는것이 아니라 connection을 물고 있다가이벤트가 발생하면 응답하여 반응성을 높이는것이다.pro : 응답성이 빠르다con : 커넥션을 쥐고 있어야 하기 때문에 자원이 많이 든다.폴링주기가 제법 길다 –&gt; 그냥 주기적으로 http request폴링주기가 아주 짧다 –&gt; comet, longpolling 사용 RestHook http://resthooks.org/ 폴링을 webhook 처럼 해라 라고 함.파이선 코드는 그렇다고 치는데 nodeJS 코드는 sails 베이스로 되어있어서 바로 가져다가 쓰기 어렵다심지어 npm 패키지가 있는것도 아니라서..","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"},{"name":"polling","slug":"polling","permalink":"http://noizbuster.com/tags/polling/"},{"name":"comet","slug":"comet","permalink":"http://noizbuster.com/tags/comet/"},{"name":"logpolling","slug":"logpolling","permalink":"http://noizbuster.com/tags/logpolling/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"써써쓰- Phiaton 100nc 블루투스 이어폰","slug":"2016-04-03-phiaton-100nc/2016-04-03-phiaton-100nc","date":"2016-04-03T01:54:00.000Z","updated":"2016-11-07T00:19:09.115Z","comments":true,"path":"2016/04/03/2016-04-03-phiaton-100nc/2016-04-03-phiaton-100nc/","link":"","permalink":"http://noizbuster.com/2016/04/03/2016-04-03-phiaton-100nc/2016-04-03-phiaton-100nc/","excerpt":"","text":"써볼만큼 써보고 쓰는 리뷰Phiaton 100ncPhiaton 이라는 브랜드는 좀 생소했지만 알고보니 국내 기업 크레신의 브랜드였다.공교롭게도 메인 이어폰도 크레신의 C740S 를 쓰고있는데 내구성이나 가격대비 음질이나 모든면에서 만족하면서 사용하고 있다. 이 제품을 구매하는데 필요한 요구조건은 크게 두가지였다. 배터리가 10시간 이상 갈것. noise cencelling을 지원할것.그리 까다로운 조건은 아니였지만 이 둘을 만족시키는 물건은 그리 많지 않았다. 장점 음질 : 적당히 밸런스 맞는 소리를 내 준다. 올라운드로 사용해도 괜찮다. APT-X 코덱도 지원한다. 멀티페어링 : 이건 별로 기대 안했던 기능이었는데 매우 편했다. 폰이랑 테블릿이랑 두개 물려놓고 스위치를 눌러 전환 할 필요 없이 현재 소리가 나고 있는 기계로 자동으로 알아서 페어링을 물려준다. 중립 가격 : 내가 살때는 9만원 정도 가격을 주고 구입을 했었고 요즘엔 7.5만원 정도에 구할 수 있는것으로 보인다. 이정도면 가격은 훌륭하다. 배터리 : 출퇴근하면서만 사용하는데 3일정도 사용 할 수 있다. 약 10시간정도는 무리 없이 쓴다고 보면 된다. 스펙상 11~12시간이라고 적혀있으니 얼추 맞는 듯 하다. 단점 이어폰 체결 : 안쓸때 이어폰을 본체에 체결시킬 수 있도록 디자인 되어있는데. 못쓰겠다.우선 체결부가 이어폰 부분과 요철로 되어있어 꽂는식으로 연결을 하는데 신경써서 잘 조준하지 않으면 들어가지가 않는다.이렇게 고생해서 끼워놓고나면 잘 붙어있어야 하는데, 바람만 불어도 쑥 빠진다. 절전옵션 : 블루투스 전원과 노이즈캔슬링 전원이 별도인데, 블루투스를 끈다고 해서 NC가 같이 꺼지는게 아니다. 때문에 사용초기에는 블루투스만 끄고 NC는 끄지 않아서 배터리가 방전되어버리는 일이 종종 있었다.노이즈 캔슬러로 쓰라는 의도인지는 잘 모르겠으나 확실히 사용성이 떨어지는건 맞는듯. 총평사용상 만족도별1개 : 사용하는 행위 자체가 고통별2개 : 대체품만 있으면 바로 포기 할 수 있음별3개 : 몇가지의 불편이 있지만 못쓸정도는 아님별4개 : 완벽하진 않지만 허용범위내의 사용성을 보임.별5개 : 흠잡을데 별로 없이 사용하기 아주 편리함 재구매 의향별1개 : 다시는 구매하지 않을것, 브랜드에 대한 불신이 생겼음.별2개 : 획기적으로 개선이 되지 않는이상 구매하지 않음.별3개 : 같은 제품으로 살 의향 있으나 개선품이 있으면 그걸 선택별4개 : 별다른 고민없이 재구매 할 것별5개 : 지인에게도 추천 하거나 선물할 수 있을정도","categories":[{"name":"review","slug":"review","permalink":"http://noizbuster.com/categories/review/"}],"tags":[{"name":"earphone","slug":"earphone","permalink":"http://noizbuster.com/tags/earphone/"},{"name":"phiaton","slug":"phiaton","permalink":"http://noizbuster.com/tags/phiaton/"},{"name":"audio","slug":"audio","permalink":"http://noizbuster.com/tags/audio/"}],"keywords":[{"name":"review","slug":"review","permalink":"http://noizbuster.com/categories/review/"}]},{"title":"Jekyll 설치 ","slug":"2016-03-18-install-jekyll/2016-03-18-install-jekyll","date":"2016-03-17T15:00:00.000Z","updated":"2016-10-27T02:19:59.690Z","comments":true,"path":"2016/03/18/2016-03-18-install-jekyll/2016-03-18-install-jekyll/","link":"","permalink":"http://noizbuster.com/2016/03/18/2016-03-18-install-jekyll/2016-03-18-install-jekyll/","excerpt":"","text":"InstallationInstall ruby2.3 on ubuntu 123sudo apt-add-repository ppa:brightbox/ruby-ngsudo apt-get updatesudo apt-get install ruby2.3 ruby2.3-dev Install gemsudo apt-get install gem Update gemsudo gem install rubygems-update Install Jekyllsudo gem install jekyll Check jekyll versionjekyll --version","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"},{"name":"blog","slug":"blog","permalink":"http://noizbuster.com/tags/blog/"},{"name":"jekyll","slug":"jekyll","permalink":"http://noizbuster.com/tags/jekyll/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Jekyll설치 가이드","slug":"2016-01-18-jekyll-installation/2016-01-18-jekyll-installation","date":"2016-03-17T15:00:00.000Z","updated":"2016-10-27T05:10:25.251Z","comments":true,"path":"2016/03/18/2016-01-18-jekyll-installation/2016-01-18-jekyll-installation/","link":"","permalink":"http://noizbuster.com/2016/03/18/2016-01-18-jekyll-installation/2016-01-18-jekyll-installation/","excerpt":"","text":"install jekyllinstall ruby2.3 ubuntu123sudo apt-add-repository ppa:brightbox/ruby-ngsudo apt-get updatesudo apt-get install ruby2.3 ruby2.3-dev install gemsudo apt-get install gem update gemsudo gem install rubygems-update install Jekyllsudo gem install jekyll check jekyll versionjekyll --version","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"},{"name":"blog","slug":"blog","permalink":"http://noizbuster.com/tags/blog/"},{"name":"jekyll","slug":"jekyll","permalink":"http://noizbuster.com/tags/jekyll/"},{"name":"staticweb","slug":"staticweb","permalink":"http://noizbuster.com/tags/staticweb/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"react-vs-angular2","slug":"2016-01-18-react-vs-angular2/2016-01-18-react-vs-angular2","date":"2016-01-17T15:00:00.000Z","updated":"2016-10-27T05:09:48.203Z","comments":true,"path":"2016/01/18/2016-01-18-react-vs-angular2/2016-01-18-react-vs-angular2/","link":"","permalink":"http://noizbuster.com/2016/01/18/2016-01-18-react-vs-angular2/2016-01-18-react-vs-angular2/","excerpt":"","text":"#MEAN VS MERN ###AngularJS 2.0 VS ReactJS ###Contents AngularJS 2.0 React Conclusion Workload Estimate Links AngularJS 1.3 는 논외로 하기로 함http://netil.github.io/slides/angularjs/index3.html#/ 앞으로 메인테넌스를 2년 미만만 지원됨. AngularJS 2.0으로의 마이그레이션 방법 없음 React 보다 7배정도 느림 –&gt; 2.0 에서 개선 소스코드의 재활용이 react에 비해서 떨어진다. –&gt; 2.0 에서 개선 watcher가 많아지면 퍼포먼스 하락 angular2.0 VS react two way data binding one way ES6 완벽지원 JS ES6일부지원 ###AngularJS 2.0장점 2way data binding 덕분에 서버사이드에서 수시로 바뀌는 값을 구현하기 편함 2.0부터는 렌더링,리랜더링 도 react 보다 더 빠르다. 성능비교 typeScript을 기본으로 지원 : JS가 타입이 없어서 생기는 디버깅 문제점 완화 단점 watcher가 많아지면 퍼포먼스 하락(2.0 에서 대폭 개선) 1.x 버전과 호환이 안됨. 아직 베타 버전 ###ReactJS장점 렌더링이 빠름 virtual dom 을 사용하여 rerendering 이 효율적임 (even with angular 2.0) JSX는 비엔지니어가 배우기에 직관적이다. 단점 Flux 아키텍쳐의 진입장벽이 비교적 높음(Flux, JSX) 다른 프레임워크와 조합하지 않으면 사용 할 수 없다. View에만 사용 할 수 있음. (단독으로 사용 불가) ###ConclusionAngular 2.0 Winangular 1.x 버전대가 ReactJS 에 비해 불리하던면이 대부분 개선되어 비슷하거나 오히려 좋아짐.서버사이드에서 자주 바뀌는 값을 브라우저에 동기화 할때 코드작성이 훨씬 쉬움, DashBoard 와 같은 기능에 적합하다고 판단Flux 아키텍쳐나 JSX 에 대해 추가로 배울 필요가 없음. (JSX는 mandatory가 아니지만 코드를 읽을줄은 알아야함)Spring 덕인지 아직은 국내에 MVC패턴에 익숙한 개발자가 Flux에 익숙한 개발자보다 많음 ###Workload Estimate업무 MEAN Stack 구축 : 0.25MM SPA(Single Page Application) 구현 : 0.25 ~ 0.5MM 투입인원 양원우 : 0.75 ~ 1 MM 예상소요기간 최단 0.5 Month 최장 1.0 Month ###LinksAngular2.0 React React를 이해하다 Flux로의 카툰 안내서 ES6 ES6 Features ES6시대의 JavaScript 서비스 구축https://scotch.io/tutorials/setting-up-a-mean-stack-single-page-applicationhttps://scotch.io/tutorials/build-a-restful-api-using-node-and-express-4","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"},{"name":"angular2","slug":"angular2","permalink":"http://noizbuster.com/tags/angular2/"},{"name":"react","slug":"react","permalink":"http://noizbuster.com/tags/react/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"js calendar-componenets-survey","slug":"2016-01-18-js-calendar-components-survey/2016-01-18-js-calendar-components-survey","date":"2016-01-17T15:00:00.000Z","updated":"2016-10-27T05:17:19.363Z","comments":true,"path":"2016/01/18/2016-01-18-js-calendar-components-survey/2016-01-18-js-calendar-components-survey/","link":"","permalink":"http://noizbuster.com/2016/01/18/2016-01-18-js-calendar-components-survey/2016-01-18-js-calendar-components-survey/","excerpt":"","text":"#Schedule Viewer Ubuntu 14.04 MEAN Stack (with Angular2.0) JobQueue : Celery(python) with MongoDB(Broker) (Optional) Vagrant Visualization graspSchedule.js DOJO[DOJO](http://dojotoolkit.org/reference-guide/1.10/dojox/calendar.html)Demo fullcalandarDemo uikit UIKIT Bootstrap data visualization http://www.chartjs.org/ http://d3js.org/ http://sigmajs.org/ http://visjs.org/ https://plot.ly/javascript","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"web","slug":"web","permalink":"http://noizbuster.com/tags/web/"},{"name":"js","slug":"js","permalink":"http://noizbuster.com/tags/js/"},{"name":"frontend","slug":"frontend","permalink":"http://noizbuster.com/tags/frontend/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"celery with mongodb","slug":"2016-01-18-celery-with-mongodb/2016-01-18-celery-with-mongodb","date":"2016-01-17T15:00:00.000Z","updated":"2016-10-27T05:08:05.427Z","comments":true,"path":"2016/01/18/2016-01-18-celery-with-mongodb/2016-01-18-celery-with-mongodb/","link":"","permalink":"http://noizbuster.com/2016/01/18/2016-01-18-celery-with-mongodb/2016-01-18-celery-with-mongodb/","excerpt":"","text":"#Celery 와 Mongo DB를 이용한 튜토리얼 참고링크http://skillachie.com/2013/06/15/intro-celery-and-mongodb/ install celerypip install celerypip install -U &#39;celery[mongodb]&#39;or pip install -U celery-with-mongodb아래와 같은 형식으로 나중에 브로커를 등록 하면 됨.123BROKER_URL = 'mongodb://localhost:27017/database_name'#Where the URL is in the format of:mongodb://userid:password@hostname:port/database_name 12345use testdb.createUser( &#123;use: \"testUser\", pwd: \"test\", roles: [\"readWrite\", \"dbAdmin\"] &#125; )#다음 명령은 read 권한만 갖고 있는 동일한 사용자를 admin 데이터베이스에 추가하고 testDB2 데이터베이스에 대한 readWrite 권한을 부여한다.use admindb.createUser( &#123;user: \"testUser\", userSource: \"test\", roles: [\"read\"], otherDBRoles:&#123; testDB2: [\"readWrite\"] &#125; &#125; ) 설정파일을 작성한다. (celeryconfig.py) 12345678from celery.schedules import crontabCELERY_RESULT_BACKEND = \"mongodb\"CELERY_MONGODB_BACKEND_SETTINGS = &#123; \"host\": \"127.0.0.1\", \"port\": 27017, \"database\": \"jobqueue\", \"taskmeta_collection\": \"stock_taskmeta_collection\",&#125; 나의경우 ubuntu 15.10 이라서 mongodb3.2 버전의 데비안패키지가 튜토리얼에 안적혀있었다. 1234567#레포지터리에 접속하기위한 퍼블릭키를 받고sudo apt-get adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9ECBEC467F0CEB10#레포지터리를 추가하고echo \"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list#설치한다sudo apt-get updatesudo apt-get install -y mongodb-org 별 문제가 없다면 MongoDB Ubuntu Installation 를 따라서 설치하면 된다. 다음과 같이 task.py 파일을 작성한다.12345from celery import Celeryapp = Celery('tasks', broker='mongodb://userid:password@localhost:27017//jobqueue')@app.taskdef add(x, y): return x + y pip install 로 설치를 했는데 celery 가 없다고 나오는경우우분투의 경우 ~/.local/bin 안에 있을수 있다.export PATH=$PATH:/home/user/.local/bin/ 명령어로 추가하면 정상작동할것임","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"python","slug":"python","permalink":"http://noizbuster.com/tags/python/"},{"name":"celery","slug":"celery","permalink":"http://noizbuster.com/tags/celery/"},{"name":"mongodb","slug":"mongodb","permalink":"http://noizbuster.com/tags/mongodb/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"Kobuki(거북이) 라즈베리파이2랑 연결하기","slug":"2016-01-15-kobuki-raspberripi2/2016-01-15-kobuki-raspberripi2","date":"2016-01-14T15:00:00.000Z","updated":"2016-10-27T05:07:33.595Z","comments":true,"path":"2016/01/15/2016-01-15-kobuki-raspberripi2/2016-01-15-kobuki-raspberripi2/","link":"","permalink":"http://noizbuster.com/2016/01/15/2016-01-15-kobuki-raspberripi2/2016-01-15-kobuki-raspberripi2/","excerpt":"","text":"꼬부기에 쓰기위한 코어로 집에 있는 라즈베리파이2를 사용하기로 했다.전력도 외장 배터리를 사용하면 한참 쓸 수 있기 때문에 적절할것이다고 생각했음.게다가 설정 끝나면 USB전력 하나만 들어가도 USB무선랜으로 SSH 물려서 쓸 수 있으니 선이 주렁주렁 달려있는것도 피할 수 있음.2니까 어느정도 연산력도 있지 않을까 기대해본다.ROS wiki에 raspberry pi 에 indigo 를 설치하는 항목 을 참고하여 진행함.대부분 비슷하겠지만 중간중간 다른곳이 있음. 준비물 Raspbian Jessie image 16GB SD-CARD Raspberry pi 2 ###raspberry pi 2 setup Downloads Raspbian Jessie Image from internet Burn image into SDcardsudo dd bs=1M if=/media/noizbuster/share/Download/2015-11-21-raspbian-jessie.img of=/dev/mmcblk0 extend internal storage (using sudo raspi-config) change locale to en_US UTF-8 (using sudo raspi-config) change CPU clock for Raspberry pi2 connect to wireless network change keyboard layout gb to us which in /etc/default/keyboard file update &amp; upgrade using apt install vim, git, htop, openssh-server, etc… setup ssh server change boot option to CLI with autologin reboot ###ROS setup 123456789101112131415161718192021222324#setup remote package reposotirysudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu jessie main\" &gt; /etc/apt/sources.list.d/ros-latest.list'wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -#make raspbian up-to-datesudo apt-get updatesudo apt-get upgrade#install dependancysudo apt-get install python-pip python-setuptools python-yaml python-distribute python-docutils python-dateutil python-six#install rosdepsudo pip install rosdep rosinstall_generator wstool rosinstall#initialize rosdepsudo rosdep initrosdep update #종종 타임아웃이 떠서 받다가 마는 모습을 볼 수도 있는데 다시 시도하면 해결 되더라#인스톨을 하기 위한 패키지들의 서브셋들을 생성해주는 기능, 이것도 통신상태가 안좋으면 종종 실패하는데 다시 시도하면 된다.#원래는 GUI툴을 제거한 버전으로 받아오곤 있는데 (jade-ros_comm-wet.rosinstall 이런식임)#난 XWindow툴이니까 SSH 너머로 화면을 받아올 수 있지 않을까 기대해서 전부 다 설치 하기로 했다.#TODO 생각보다 많이 걸리고 쓸데없는거까지 깔리는 느낌인데 (QT IDE같은거) 나중에 개선해봐야겠다.rosinstall_generator desktop_full --rosdistro jade --deps &gt; jade-desktop-full.rosinstallwstool init src jade-desktop-full.rosinstall","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"},{"name":"raspberryPi","slug":"raspberryPi","permalink":"http://noizbuster.com/tags/raspberryPi/"},{"name":"kobuki","slug":"kobuki","permalink":"http://noizbuster.com/tags/kobuki/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"리뷰 - Gigabyte P34W V3","slug":"2016-01-13-review-p34w-v3/2016-01-13-review-p34w-v3","date":"2016-01-12T15:00:00.000Z","updated":"2018-08-23T07:26:17.678Z","comments":true,"path":"2016/01/13/2016-01-13-review-p34w-v3/2016-01-13-review-p34w-v3/","link":"","permalink":"http://noizbuster.com/2016/01/13/2016-01-13-review-p34w-v3/2016-01-13-review-p34w-v3/","excerpt":"","text":"쓸만큼 써보고 써보는 리뷰Gigabyte P34W V3 Laptop장점가격대비 높은 성능비가격대비 아주 높은 성능비를 보인다.나는 i7 에 GTX970 이 달려있는 모델을 샀는데 130만원 정도 주었다.여기에 SSD추가로 더 달고 램을 16GB로 확장해서 사용하였다. 높은 확장성이정도 무게에 이정도 크기의 랩탑에는 대부분 추가 SSD 베이가 없었다.이번에 랩탑을 구매하면서 가장 신경쓴 부분은 물리하드2개, 램베이2개, 고성능GPU, CPU 였다.램베이2개 고성능프로세서를 만족시키는 랩탑들은 많았고 당시에는 금전적인 여유도 있었기에 Razer Blade 스리즈를 고민하기도 하였으나.GTX970이 달려있는 모델에 꽂혀서 문의해보니 M-SATA를 포함해도 물리하드를 한개밖에 못단다고 답변받아 포기하였다.그만큼 물리하드를 2개이상 달수 있는 모델이 이정도 크기에서 대안이 없었으며이 때문에 가격을 제치고도 구매하게 된 결정적인 계기가 되었다. 가벼움이정도 가격, 스펙에 랩탑들이 대부분 무게가 2.3~2.6 킬로에 분포되어 있었다.가격차이가 전혀 나지 않았음에도 P34W는 본체무게가 1.7킬로밖에 하지 않는다. 친절한 AS초기불량으로 AS를 맡겼을때도 그렇고 힌지부분 케이스가 부서져서 AS를 받았을때 카운터의 직원분이 아주 친절했다.기기 상태를 보고 어떤것이 문제인지 카운터에 계시는분도 어느정도 파악 가능한것으로 보였다.내가 일정이 좀 급했는데 기사분께 양해를 구해서 빨리 수리 될 수 있게 도와주셨다. 잘 갖추어진 유틸window용으로 제공되는 유틸 두개가 좋은편이다.하나는 드라이버를 업데이트 해주는건데 전체적으로 차트 모양으로 보여줘서 현재 내 버전과 권장버전을 보여준다.권장버전이 아주 최신은 아닌데 주기적으로 업데이트가 되는것으로 봐서 관리는 잘 되는듯 하다.다른 하나는 전원옵션이나 색온도, 팬속도등을 컨트롤 할 수 있는 유틸인데 디자인은 좀 촌스럽지만 배치나 직관성은 상당히 좋다.7세 꼬마도 무리없이 쓸 수 있을 정도로 아주 잘 만들어놨다. 넉넉한 포트들 USB3.0 4개 RGB포트 HDMI포트 LAN포트 SD카드리더 이렇게 포트를 제공한다. 이정도 무게에 이정도면 아주 훌륭하다.RGB포트가 빠지고 Display 포트가 들어가면 금상첨화겠지만내가 때때로 RGB포트를 사용했던 기억을 되짚어보면 아직은 시기상조인가 싶다 단점마감부실전체적으로 마감이 좀 부실하다는 느낌을 많이 받는다.특히 키보드 모듈이 전체적으로 유격이 있고 붕 떠있는 느낌이라 만지거나 볼때마다 거슬린다.요즘 랩탑이 대체적으로 얇게 만들어서 어느정도 탄성을 가지는건 알겠는데.힌지부분이 연결되어있는 디스플레이 부분이 여닫을때 너무 휜다는 느낌을 받는다. 금속피로가 누적되지 않을까 염려된다. 초기불량문제무선랜모듈과 메인보드메인칩셋에 문제가 있어서 AS 받았다.주요 증상은 무선랜이 주기적으로 죽어버리고 내장그래픽과 외장그래픽이 서로 연동될때 내장그래픽이 죽어버리는 상황이었다.처음에 AS맡겼을때는 기사분이 문제 없다고 포맷해봐라 라는 이야기를 자꾸해서 짜증났었는데.내가 네트워크 끊어지는거 로그랑 시연동영상까지 찍어서 그냥 부품 교환해달라고 해서 해결했다.원래는 260만원짜리 AORUS을 샀다가 외장그래픽 냉땜문제로 교환받으려다 재고가 없어서 환불받고 이걸 산건데이런일이 반년도 안돼서 3번이나 일어나니 GIGABYTE의 마감상태에 대해 의구심이 생길수밖에 없는것 같다. 키보드 퀄러티마감부실에서도 살짝 언급을 했지만 키보드 퀄러티가 아주 구리다.일단 키캡이 다른제품에 비해서 얇은것 같고 때때로 키보드를 누를때 요철부에 키가 걸려서 휘어지면서 걸린다.이제 말이 때때로지 열번누르면 한두번은 그러는것 같아서 타이핑할맛이 안난다.특히 자주 누르는 left-ctrl, 화살표 들이 자주 그러니 체감은 더하다.키보드 모듈 전체가 본체랑 따로 놀기도 한다. 특히 윗부분은 거의 1mm쯤 유격이 있다.뭔가 조립이 잘못된건지 싶어 뒷판을 열어 봤을때 멀쩡해서 얼척없었다.화살표 키 생긴것도 맘에 안들고 좌, 우 키가 특히 위에 언급한 문제를 일으킨다. 모양이 좀 작았으면 덜 그랬을것 같다. 키보드배치키보드의 질 자체도 문제인데 키 배치도 당췌 적응이 안된다. Asus나 삼성의 키배치가 더 나은듯.개인적으로 펑션키가(Fn)가 맨 왼쪽 아래에만 없으면 된다는 주의기 때문에 최악은 아니라고 생각한다. 헤비급어댑터어댑터 무게가 700그램에 육박한다. 본체가 가벼운걸 여기서 다 까먹는다.Razer Blade 의 두배쯤 되나? 리눅스드라이버 미제공 및 리눅스용 온도센서 드라이버 미제공dell의 제품과는 다르게 얘한테 달려있는 온도센서들은 리눅스를 지원하지 않고 홈페이지에서도 배포하지 않는다.때문에 laptop mode같은걸로 온도에 따라 CPU 로드율을 관리하거나 할 수가 없다.난 삽질을 할 만큼 했다고 생각한다.아, 그리고 디폴트 세팅이 뭔지 모르겠지만 팬의 속도는 프로세서들의 로드율에 따라 달라지는것 같다.그래서 온도가 오르지 않아도 갑자기 하이로드가 걸리면 비행기 이륙하는 소리를 들을 수 있다. 조악한 내장 스피커이전에 쓰던 랩탑이 Bang &amp; Olufsen ICEpower® 어쩌고 하면서 음질이 좋다고 했지만 난 잘 모르겠다 였는데P34W V3 의 음질을 듣고 아 그게 좋은거였구나 싶었다. 요구르트 통에 실 연결해서 만든 전화기 같은 소리가 난다.돌비 어쩌고 하는걸 깔수 있는데 깔아도 저음이 싼티나는건 마찬가지다 총점가성비 ★★★★☆완성도 ★☆☆☆☆디자인 ★★★☆☆재구매 ★☆☆☆☆ 총평전체적으로 참 괜찮은 제품이나 키보드의 하드 트롤링에 때문에오히려 집이나 직장에서 평소에 모니터 물려서 쓰다가 유사시에 들고다닐 용도로 쓰기에 좋은것 같다.","categories":[{"name":"review","slug":"review","permalink":"http://noizbuster.com/categories/review/"}],"tags":[{"name":"gigabyte","slug":"gigabyte","permalink":"http://noizbuster.com/tags/gigabyte/"},{"name":"laptop","slug":"laptop","permalink":"http://noizbuster.com/tags/laptop/"},{"name":"p34w v3","slug":"p34w-v3","permalink":"http://noizbuster.com/tags/p34w-v3/"}],"keywords":[{"name":"review","slug":"review","permalink":"http://noizbuster.com/categories/review/"}]},{"title":"ROS Study 008. Using rosed to edit files in ROS","slug":"2016-01-04-ros-8-using_rosed/2016-01-04-ros-8-using_rosed","date":"2016-01-03T15:00:00.000Z","updated":"2016-10-27T05:05:31.475Z","comments":true,"path":"2016/01/04/2016-01-04-ros-8-using_rosed/2016-01-04-ros-8-using_rosed/","link":"","permalink":"http://noizbuster.com/2016/01/04/2016-01-04-ros-8-using_rosed/2016-01-04-ros-8-using_rosed/","excerpt":"","text":"msg 와 srv 에 대한 설명msg: msg 파일은 로스 메세지의 필드에 대해 설명된 간단한 파일이다. 그것들은 서로 다른 언어로 메세지를 생성하기위해서 사용된다.srv: srv 파일은 서비스에 대해서 설명된 파일이다. 이것은 두개의 부분으로 구성된다:리퀘스트, 리스폰스 msg 파일은 패키지에서 msg 디렉토리에 저장된다.그리고 srv 파일은 srv디렉토리에 저장된다. msg 파일은 간단한 텍스트파일이다 필트 타입과 필드네임을 각각 줄에 포함한. 필드 타입들은 다음과 같은게 될 수 있다. int8, int16, int32, int64 (plus uint*) float32, float64 string time, duration other msg files variable-length array[] and fixed-length array[C] ROS에는 또한 특별한 타입이 존재하는데 Header 이다 헤더는 타임스템프와 코오디네이트 프레임 정보를 포함하고 있다. 그것들은 ROS에서 일반적으로 사용된다. 당신은 자주 메세지 헤더에서 이런것들을 자주 보게 될것이다. 여기 헤더를 이용한 메세지에 대한 예제가 있다. 스트링과 두개의 다른 메세지 :1234Header headerstring child_frame_idgeometry_msgs/PoseWithCovariance posegeometry_msgs/TwistWithCovariance twist srv 파일도 두 부분으로 되어있다는것을 빼면 msg 과 같이 간단한 텍스트파일이다. —로 리퀘스트와 리스폰스 부분은 구분되어있다.1234int64 Aint64 B---int64 Sum 앞에 A, B 는 리퀘스트 부분이고 뒤에 sum 은 리스폰스 부분이다. msg 만들어보기123$ cd ~/catkin_ws/src/beginner_tutorials$ mkdir msg$ echo \"int64 num\" &gt; msg/Num.msg The example .msg file above contains only 1 line. You can, of course, create a more complex file by adding multiple elements, one per line, like this:1234string first_namestring last_nameuint8 ageuint32 score","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"ROS Study 009. Creating a ROS msg and srv","slug":"2016-01-04-ros-9-creating_msg_and_srv/2016-01-04-ros-9-creating_msg_and_srv","date":"2016-01-03T15:00:00.000Z","updated":"2016-10-27T05:05:50.847Z","comments":true,"path":"2016/01/04/2016-01-04-ros-9-creating_msg_and_srv/2016-01-04-ros-9-creating_msg_and_srv/","link":"","permalink":"http://noizbuster.com/2016/01/04/2016-01-04-ros-9-creating_msg_and_srv/2016-01-04-ros-9-creating_msg_and_srv/","excerpt":"","text":"rosedrosed 는 rosbash의 일부분이다.이 명령어는 패키지명과 파일명으로 바로 파일을 편집 할 수 있도록 해준다.rosed roscpp Logger.msg 로 사용하면 roscpp 패키지 내부의 Logger.msg 파일을 바로 에디터로 열어준다.역시 탭 컴플리션을 지원하기 때문에 rosed roscpp 상태에서 탭을 두번치면 내부의 파일을 보여준다. 에디터를 바꾸고싶으면 nano : export EDITOR=&#39;nano -w&#39; vim : export EDITOR=&#39;vim -w&#39; emacs : export EDITOR=&#39;emacs -nw&#39;","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"ROS Study 017. Recording and playing back data","slug":"2016-01-04-ros-17-record_and_playback_data/2016-01-04-ros-17-record_and_playback_data","date":"2016-01-03T15:00:00.000Z","updated":"2016-10-27T05:06:14.135Z","comments":true,"path":"2016/01/04/2016-01-04-ros-17-record_and_playback_data/2016-01-04-ros-17-record_and_playback_data/","link":"","permalink":"http://noizbuster.com/2016/01/04/2016-01-04-ros-17-record_and_playback_data/2016-01-04-ros-17-record_and_playback_data/","excerpt":"","text":"Description: This tutorial will teach you how to record data from a running ROS system into a .bag file, and then to play back the data to produce similar behavior in a running system. Keywords: data, rosbag, record, play, info, bag Tutorial Level: BEGINNER Next Tutorial: Getting started with roswtf 차례Recording data (creating a bag file)Recording all published topicsExamining and playing the bag fileRecording a subset of the dataThe limitations of rosbag record/play Recording data (creating a bag file)This section of the tutorial will instruct you how to record topic data from a running ROS system. The topic data will be accumulated in a bag file. First, execute the following two commands: roscorerosrun turtlesim turtlesim_noderosrun turtlesim turtle_teleop_keyThis will start two nodes - the turtlesim visualizer and a node that allows for the keyboard control of turtlesim using the arrows keys on the keyboard. If you select the terminal window from which you launched turtle_keyboard, you should see something like the following: Reading from keyboardUse arrow keys to move the turtle.Pressing the arrow keys on the keyboard should cause the turtle to move around the screen. Note that to move the turtle you must have the terminal from which you launched turtlesim selected and not the turtlesim window. Recording all published topics First lets examine the full list of topics that are currently being published in the running system. To do this, open a new terminal and execute the command: rostopic list -vThis should yield the following output: Published topics: /turtle1/color_sensor [turtlesim/Color] 1 publisher /turtle1/cmd_vel [geometry_msgs/Twist] 1 publisher /rosout [rosgraph_msgs/Log] 2 publishers /rosout_agg [rosgraph_msgs/Log] 1 publisher /turtle1/pose [turtlesim/Pose] 1 publisher Subscribed topics: /turtle1/cmd_vel [geometry_msgs/Twist] 1 subscriber /rosout [rosgraph_msgs/Log] 1 subscriberThe list of published topics are the only message types that could potentially be recorded in the data log file, as only published messages are recorded. The topic /turtle1/cmd_vel is the command message published by teleop_turtle that is taken as input by the turtlesim process. The messages /turtle1/color_sensor and /turtle1/pose are output messages published by turtlesim. We now will record the published data. Open a new terminal window. In this window run the following commands: mkdir ~/bagfilescd ~/bagfilesrosbag record -aHere we are just making a temporary directory to record data and then running rosbag record with the option -a, indicating that all published topics should be accumulated in a bag file. Move back to the terminal window with turtle_teleop and move the turtle around for 10 or so seconds. In the window running rosbag record exit with a Ctrl-C. Now examine the contents of the directory ~/bagfiles. You should see a file with a name that begins with the year, data, and time and the suffix .bag. This is the bag file that contains all topics published by any node in the time that rosbag record was running. Examining and playing the bag fileNow that we’ve recorded a bag file using rosbag record we can examine it and play it back using the commands rosbag info and rosbag play. First we are going to see what’s recorded in the bag file. We can do the info command – this command checks the contents of the bag file without playing it back. Execute the following command from the bagfiles directory: rosbag info You should see something like: path: 2014-12-10-20-08-34.bagversion: 2.0duration: 1:38s (98s)start: Dec 10 2014 20:08:35.83 (1418270915.83)end: Dec 10 2014 20:10:14.38 (1418271014.38)size: 865.0 KBmessages: 12471compression: none [1/1 chunks]types: geometry_msgs/Twist [9f195f881246fdfa2798d1d3eebca84a] rosgraph_msgs/Log [acffd30cd6b6de30f120938c17c593fb] turtlesim/Color [353891e354491c51aabe32df673fb446] turtlesim/Pose [863b248d5016ca62ea2e895ae5265cf9]topics: /rosout 4 msgs : rosgraph_msgs/Log (2 connections) /turtle1/cmd_vel 169 msgs : geometry_msgs/Twist /turtle1/color_sensor 6149 msgs : turtlesim/Color /turtle1/pose 6149 msgs : turtlesim/PoseThis tells us topic names and types as well as the number (count) of each message topic contained in the bag file. We can see that of the topics being advertised that we saw in the rostopic output, four of the five were actually published over our recording interval. As we ran rosbag record with the -a flag it recorded all messages published by all nodes. The next step in this tutorial is to replay the bag file to reproduce behavior in the running system. First kill the teleop program that may be still running from the previous section - a Ctrl-C in the terminal where you started turtle_teleop_key. Leave turtlesim running. In a terminal window run the following command in the directory where you took the original bag file: rosbag play In this window you should immediately see something like: [ INFO] [1418271315.162885976]: Opening 2014-12-10-20-08-34.bag Waiting 0.2 seconds after advertising topics… done. Hit space to toggle paused, or ‘s’ to step.In its default mode rosbag play will wait for a certain period (.2 seconds) after advertising each message before it actually begins publishing the contents of the bag file. Waiting for some duration allows any subscriber of a message to be alerted that the message has been advertised and that messages may follow. If rosbag play publishes messages immediately upon advertising, subscribers may not receive the first several published messages. The waiting period can be specified with the -d option. Eventually the topic /turtle1/cmd_vel will be published and the turtle should start moving in turtlesim in a pattern similar to the one you executed from the teleop program. The duration between running rosbag play and the turtle moving should be approximately equal to the time between the original rosbag record execution and issuing the commands from the keyboard in the beginning part of the tutorial. You can have rosbag play not start at the beginning of the bag file but instead start some duration past the beginning using the -s argument. A final option that may be of interest is the -r option, which allows you to change the rate of publishing by a specified factor. If you execute: rosbag play -r 2 You should see the turtle execute a slightly different trajectory - this is the trajectory that would have resulted had you issued your keyboard commands twice as fast. Recording a subset of the dataWhen running a complicated system, such as the pr2 software suite, there may be hundreds of topics being published, with some topics, like camera image streams, potentially publishing huge amounts of data. In such a system it is often impractical to write log files consisting of all topics to disk in a single bag file. The rosbag record command supports logging only particular topics to a bag file, allowing a user to only record the topics of interest to them. If any turtlesim nodes are running exit them and relaunch the keyboard teleop launch file: rosrun turtlesim turtlesim_noderosrun turtlesim turtle_teleop_keyIn your bagfiles directory, run the following command: rosbag record -O subset /turtle1/cmd_vel /turtle1/poseThe -O argument tells rosbag record to log to a file named subset.bag, and the topic arguments cause rosbag record to only subscribe to these two topics. Move the turtle around for several seconds using the keyboard arrow commands, and then Ctrl-C the rosbag record. Now check the contents of the bag file (rosbag info subset.bag). You should see something like this, with only the indicated topics: path: subset.bagversion: 2.0duration: 12.6sstart: Dec 10 2014 20:20:49.45 (1418271649.45)end: Dec 10 2014 20:21:02.07 (1418271662.07)size: 68.3 KBmessages: 813compression: none [1/1 chunks]types: geometry_msgs/Twist [9f195f881246fdfa2798d1d3eebca84a] turtlesim/Pose [863b248d5016ca62ea2e895ae5265cf9]topics: /turtle1/cmd_vel 23 msgs : geometry_msgs/Twist /turtle1/pose 790 msgs : turtlesim/Pose ###The limitations of rosbag record/playIn the previous section you may have noted that the turtle’s path may not have exactly mapped to the original keyboard input - the rough shape should have been the same, but the turtle may not have exactly tracked the same path. The reason for this is that the path tracked by turtlesim is very sensitive to small changes in timing in the system, and rosbag is limited in its ability to exactly duplicate the behavior of a running system in terms of when messages are recorded and processed by rosrecord, and when messages are produced and processed when using rosplay. For nodes like turtlesim, where minor timing changes in when command messages are processed can subtly alter behavior, the user should not expect perfectly mimicked behavior. Now that you’ve learned how to record and play back data, let’s learn how to troubleshoot with roswtf.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"ROS Study 007. Using rqt_console and roslaunch","slug":"2016-01-04-ros-7-using_rqtconsole_and_roslaunch/2016-01-04-ros-7-using_rqtconsole_and_roslaunch","date":"2016-01-03T15:00:00.000Z","updated":"2016-10-27T05:05:10.019Z","comments":true,"path":"2016/01/04/2016-01-04-ros-7-using_rqtconsole_and_roslaunch/2016-01-04-ros-7-using_rqtconsole_and_roslaunch/","link":"","permalink":"http://noizbuster.com/2016/01/04/2016-01-04-ros-7-using_rqtconsole_and_roslaunch/2016-01-04-ros-7-using_rqtconsole_and_roslaunch/","excerpt":"","text":"Prerequisites rqt and turtlesim package1sudo apt-get install ros-&lt;distro&gt;-rqt ros-&lt;distro&gt;-rqt-common-plugins ros-&lt;distro&gt;-turtlesim rqt_console &amp; rqt_logger_levelrqt_console 은 ROS의 로깅 프레임워크에 붙어서 노드들이 내는 출력들을 보게 한다.rosrun rqt_console rqt_console 로 실행한다.rqt_logger_level은 debug, info, warning 등의 로깅 레벨을 정할 수 있게 해준다.rosrun rqt_logger_level rqt_logger_level로 실행한다. Using roslaunchroslaunch 는 정해진 설정대로 여러개의 노드를 한번에 실행 시켜주는것이다. 하나의 프로젝트를 통채로 실행할때 좋다.12345678910111213141516&lt;launch&gt; &lt;group ns=\"turtlesim1\"&gt; &lt;node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/&gt; &lt;/group&gt; &lt;group ns=\"turtlesim2\"&gt; &lt;node pkg=\"turtlesim\" name=\"sim\" type=\"turtlesim_node\"/&gt; &lt;/group&gt; &lt;node pkg=\"turtlesim\" name=\"mimic\" type=\"mimic\"&gt; &lt;remap from=\"input\" to=\"turtlesim1/turtle1\"/&gt; &lt;remap from=\"output\" to=\"turtlesim2/turtle1\"/&gt; &lt;/node&gt;&lt;/launch&gt; 이런식으로 구성된다.각각의 노드의 이름을 정해 줄 수 있으며 입출력을 리매핑 해주는것도 가능하다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"ROS Study 004. ros node","slug":"2016-01-03-ros-4-node/2016-01-03-ros-4-node","date":"2016-01-02T15:00:00.000Z","updated":"2016-10-27T05:17:14.235Z","comments":true,"path":"2016/01/03/2016-01-03-ros-4-node/2016-01-03-ros-4-node/","link":"","permalink":"http://noizbuster.com/2016/01/03/2016-01-03-ros-4-node/2016-01-03-ros-4-node/","excerpt":"","text":"####본 내용은 개념적인것임으로 기존에 설명된 자료들을 이야기 하고 넘어가도록 하겠다.한국어로 설명된 카페의 내용이다.http://cafe.naver.com/openrt/2468 ####이하 내용은 wiki.ROS.org 에 게시된 튜토리얼을 대충 번역한것이다.http://wiki.ros.org/ROS/Tutorials/UnderstandingNodes ###사전작업 이 튜토리얼을 위해서 우리는 가벼운 시뮬레이터를 사용할것이다.$ sudo apt-get install ros-&lt;distro&gt;-ros-tutorials&lt;distro&gt;부분을 당신이 사용하는 배포판으로 대체해서 사용하면 된다.(e.g. hydro, groovy, electric, fuerte etc.) ###그래프컨셉을 빠르게 리뷰하기 Nodes: 노드는 ROS를 이용해서 실행가능한것이고 ㅇ다른 노트들과 대화(통신)할 수 있는것이다. Messages: 토픽(Topic)을 구독(subscribing) 하거나 발행(publishing)할때 사용되는 ROS 데이터 타입 Topics: 노드는 토픽에 대한 메세지를 발행 할 수 있을 뿐만 아니라 구독 해서 메세지를 받을 수도 있다. Master: 로스 서비스의 이름, 같은 서비스에 있는 노드들이 서로를 찾을 수 있도록 중계해주는 역할. rosout: 로스에서 사용되는 stdout/stderr와 같은 인터페이스 roscore: Master + rosout + parameter server (파라미터 서버에 대해서는 나중에 설명한다.) ###Nodes 노드 노드는 로스 패키지내에서 실행 가능한것 이상이 아니다. 로스 노드는 로스 클라이언트 라이브러리를 사용해서 다른 노드들과 통신한다. 노드들은 토픽을 발행하거나 구독 할 수 있다. 노드들은 서비스를 제공하거나 사용할 수 있다. ###Client Libraries 로스 클라이언트 라이브러리는 서로 다른 언어로 작성된 노드끼리 통신 할 수 있도록 해준다. rospy = python client library roscpp = c++ client library ###roscore roscore 는 로스르 이용해서 실행해야할 첫번째것이다. Please run:1$ roscore 이런 메세지를 볼 수 있을것이다.123456789101112131415161718... logging to ~/.ros/log/9cf88ce4-b14d-11df-8a75-00251148e8cf/roslaunch-machine_name-13039.logChecking log directory for disk usage. This may take awhile.Press Ctrl-C to interruptDone checking log file disk usage. Usage is &lt;1GB.started roslaunch server http://machine_name:33919/ros_comm version 1.4.7SUMMARY========PARAMETERS * /rosversion * /rosdistroNODESauto-starting new masterprocess[master]: started with pid [13054]ROS_MASTER_URI=http://machine_name:11311/setting /run_id to 9cf88ce4-b14d-11df-8a75-00251148e8cfprocess[rosout-1]: started with pid [13067]started core service [/rosout] 만약 로스코어가 초기화 되어있지 않았으면 아마 당신은 네트워크 설정 문제가 있을것이다.Network Setup - Single Machine Configuration만약 로스코어가 초기화 되지 않고 퍼미션이 부족하다는 메세지를 보았으면 아마도 ~/.ros 경로를 루트가 소유하고 있을것이다. 다음 명령어도 해결 할수 있다.1$ sudo chown -R &lt;your_username&gt; ~/.ros ###Using rosnode roscore를 켜둔채로 새로운 터미널을 열어서 로스 노드를 사용해 보자 rosnode 는 ROS에서 현재 동작중인 노드들에 대한 정보를 보여준다. 12$ rosnode list/rosout 이것은 우리에게 rosout 한개의 노드만이 실행중이라고 보여준다. 이것은 항상 실행되며 노드에 대한 디버깅 출력되 로그를 모은다. rosnode 명령어는 특정 노드에 대한 정보만 리턴 할 수도 있다.1234567891011121314$ rosnode info /rosoutNode [/rosout]Publications: * /rosout_agg [rosgraph_msgs/Log]Subscriptions: * /rosout [unknown type]Services: * /rosout/set_logger_level * /rosout/get_loggerscontacting node http://machine_name:54614/ ...Pid: 5092 이제 더 많은 노드들을 봐보자, 이것을 위해 우리는 rosrun을 이용해서 다른 노드들을 가져와 볼 것 이다. ###Using rosrun rosrun 은 패키지 이름을 이용해서 직접적으로 패키지에 있는 노드를 구동 할 수 있게 해준다.(알고 있는 패키지 경로에 대해서만). Usage:12#rosrun [package_name] [node_name]$ rosrun turtlesim turtlesim_node 당신은 turtlesim 창을 볼 수 있을것이다. In a new terminal:123$ rosnode list/rosout/turtlesim 강력한 로스의 기능중 하나는 커맨드라인에서 노드의 이름을 다시 할당 할수 있는것이다. turtlesim window를 닫아 노드를 중단시키고 (혹은 터미널에서 컨트롤+C를 누르고 재실행하는데 다음과 같이 아규먼트를 줄것이다. 1$ rosrun turtlesim turtlesim_node __name:=my_turtle 이제 다시 노드들의 리스트를 보면 123$ rosnode list/rosout/my_turtle 제대로 안닫긴 노드가 리스트에 보일때는 $ rosnode cleanup 을 이용해서 클린업 할 수 있다. rosnode 를 이용해서 노드에다가 핑을 날려볼수도 있다.1234567$ rosnode ping my_turtlerosnode: node is [/my_turtle]pinging /my_turtle with a timeout of 3.0sxmlrpc reply from http://aqy:42235/ time=1.152992msxmlrpc reply from http://aqy:42235/ time=1.120090msxmlrpc reply from http://aqy:42235/ time=1.700878msxmlrpc reply from http://aqy:42235/ time=1.127958ms ###ReviewWhat was covered: roscore = ros+core : master (provides name service for ROS) + rosout (stdout/stderr) + parameter server (parameter server will be introduced later) rosnode = ros+node : ROS tool to get information about a node. rosrun = ros+run : runs a node from a given package. Now that you understand how ROS nodes work, let’s look at how ROS topics work. Also, feel free to press Ctrl-C to stop turtlesim_node.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"ROS Study 006. Services and Parameters","slug":"2016-01-03-ros-6-service-and-parameter/2016-01-03-ros-6-service-and-parameter","date":"2016-01-02T15:00:00.000Z","updated":"2016-10-27T05:04:33.955Z","comments":true,"path":"2016/01/03/2016-01-03-ros-6-service-and-parameter/2016-01-03-ros-6-service-and-parameter/","link":"","permalink":"http://noizbuster.com/2016/01/03/2016-01-03-ros-6-service-and-parameter/2016-01-03-ros-6-service-and-parameter/","excerpt":"","text":"###서비스토픽은 발행자가 중단하지 않는이상 지속적으로 메세지를 주고받는다.하지만 서비스는 일회성으로 연결 - 서비스요청 - 서비스응답 - 하고 닫는다.다시 통신하려면 연결부터 시작해야한다. rosservice rosservice call [service] [args] 서비스를 아규먼트와 함께 요청한다. rosservice call /clear 를 실행시키면 거북이가 다닌 경로가 지워진다. rosservice type spawn| rossrv show 이런식으로 하면 서비스가 가진 타입과 내용물이 보인다. rosservice call spawn 2 2 0.2 &quot;&quot; 알게된 내용으로 콜 할 수 있다. ###파라미터rosparam rosparam set [파라미터이름] [값] set parameter rosparam get [파라미터이름] get parameter rosparam get / 으로 모든 값들을 볼 수 있다. rosparam load [파일이름] [네임스페이스] load parameters from file rosparam dump [파일이름] [네임스페이스] dump parameters to file 12rosparam load params.yaml copyrosparam get copy/background_b 를 이용해서 덤프뜰 수 있다. 뒤에 붙은 copy 와 같은 네임스페이스는 생략가능 rosparam delete delete parameter rosparam list list parameter names","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"ROS Study 005. Topics","slug":"2016-01-03-ros-5-topic/2016-01-03-ros-5-topic","date":"2016-01-02T15:00:00.000Z","updated":"2016-10-27T05:04:18.155Z","comments":true,"path":"2016/01/03/2016-01-03-ros-5-topic/2016-01-03-ros-5-topic/","link":"","permalink":"http://noizbuster.com/2016/01/03/2016-01-03-ros-5-topic/2016-01-03-ros-5-topic/","excerpt":"","text":"###토픽 rostopic echo [토픽이름] 토픽에서 주고 받는 내용 출력 rostopic list 현재 활성화된 토픽들의 리스트를 본다. rostopic pub [토픽] [메세지타입] [데이터] 해당토픽에 메세지를 발행한다. rosrun rqt_graph rqt_graph 현재 노드들과 토픽들에 대해서 그래프를 그려준다. rostopic type /turtle1/cmd_vel | rosmsg show 해당 채널의 메세지의 타입과 내용을 보여준다. rostopic hz /turtle1/pose 메세지의 데이터 레이트를 보여준다. rosrun rqt_plot rqt_plot 특정 메세지의 특정값이 시간에 따라 어떻게 변하는지 그래프로 그려줌","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"ROS Study 003. Create the Package","slug":"2015-12-30-ros-3-create-package/2015-12-30-ros-3-create-package","date":"2015-12-29T15:06:00.000Z","updated":"2016-10-27T05:02:58.163Z","comments":true,"path":"2015/12/30/2015-12-30-ros-3-create-package/2015-12-30-ros-3-create-package/","link":"","permalink":"http://noizbuster.com/2015/12/30/2015-12-30-ros-3-create-package/2015-12-30-ros-3-create-package/","excerpt":"","text":"패키지 만들기 ros 패키지를 만드는 방법은 2가지가 있다. roscreate-pkg를 사용한다. groovy 기반의 이전에 쓰던 방법 catkin을 사용한다 Fuerte 이후 버전에서 사용 할 수 있는 최신의 방법 Catkin으로 워크스페이스 만들기 Workspace 디렉토리 생성 catkin_init_workspace로 Workspace 초기화 catkin_make를 해서 빌드 만약 이 Workspace의 경로를 $ROS_PACKAGE_PATH에 추가 하고 싶으면 source devel/setup.bash 를 하면 된다. Workspace에는 여러개의 Package가 포함 될 수 있다. 12345678910workspace_folder/ -- WORKSPACE src/ -- SOURCE SPACE CMakeLists.txt -- &apos;Toplevel&apos; CMake file, provided by catkin package_1/ CMakeLists.txt -- CMakeLists.txt file for package_1 package.xml -- Package manifest for package_1 ... package_n/ CMakeLists.txt -- CMakeLists.txt file for package_n package.xml -- Package manifest for package_n 이런식으로 Workspace의 내부가 구성된다. catkin 으로 패키지 만들기 Workspace의 src 디렉토리로 이동 catkin_create_pkg beginner_tutorials std_msgs rospy roscpp 로 패키지 생성 파라미터들은 앞에서부터 PackageName, 나머지는 의존성 패키지들 12345# 이렇게 디렉토리와 파일들이 생성된다.rosand@rossandbox:~/catkin_ws/src$ lsbeginner_tutorials CMakeLists.txtrosand@rossandbox:~/catkin_ws/src$ ls beginner_tutorials/CMakeLists.txt include package.xml src catkin_make명령어로 빌드를 해본다. 12345678910111213141516171819202122232425262728293031323334rosand@rossandbox:~/catkin_ws$ catkin_makeBase path: /home/rosand/catkin_wsSource space: /home/rosand/catkin_ws/srcBuild space: /home/rosand/catkin_ws/buildDevel space: /home/rosand/catkin_ws/develInstall space: /home/rosand/catkin_ws/install######## Running command: \"cmake /home/rosand/catkin_ws/src -DCATKIN_DEVEL_PREFIX=/home/rosand/catkin_ws/devel -DCMAKE_INSTALL_PREFIX=/home/rosand/catkin_ws/install -G Unix Makefiles\" in \"/home/rosand/catkin_ws/build\"####-- Using CATKIN_DEVEL_PREFIX: /home/rosand/catkin_ws/devel-- Using CMAKE_PREFIX_PATH: /opt/ros/jade-- This workspace overlays: /opt/ros/jade-- Using PYTHON_EXECUTABLE: /usr/bin/python-- Using Debian Python package layout-- Using empy: /usr/bin/empy-- Using CATKIN_ENABLE_TESTING: ON-- Call enable_testing()-- Using CATKIN_TEST_RESULTS_DIR: /home/rosand/catkin_ws/build/test_results-- Found gtest sources under '/usr/src/gtest': gtests will be built-- Using Python nosetests: /usr/bin/nosetests-2.7-- catkin 0.6.16-- BUILD_SHARED_LIBS is on-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-- ~~ traversing 1 packages in topological order:-- ~~ - beginner_tutorials-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-- +++ processing catkin package: 'beginner_tutorials'-- ==&gt; add_subdirectory(beginner_tutorials)-- Configuring done-- Generating done-- Build files have been written to: /home/rosand/catkin_ws/build######## Running command: \"make -j4 -l4\" in \"/home/rosand/catkin_ws/build\"#### 만든 패키지를 $ROS_PACKAGE_PATH 에 추가 한다. source /devel/setup.bash 를 이용하면 된다. 그러면 ‘echo $ROS_PACAKGE_PATH’ 로 확인했을때 새로운 경로가 추가된것이 보인다. /home/rosand/catkin_ws/src:/opt/ros/jade/share:/opt/ros/jade/stacks rospack 명령어로 해당 Package가 어떤 first-dependancy 를 가지고 있는지 확인할 수 있다. 1234rosand@rossandbox:~/catkin_ws/devel$ rospack depends1 beginner_tutorialsroscpprospystd_msgs ‘4.’ 에서 언급한 setup.bash를 하지 않으면 경로를 찾지 못하기 때문에 해 주어야 정상적으로 이렇게 볼수 있다. 이렇게 확인 할수 있는패키지들은 1차 적으로 의존성을 가지는 패키지들인데 의존성 패키지들 또한 다른 패키지에 의존성을 가진다. 123456$ rospack depends1 rospygenpyrosgraphrosgraph_msgsroslibstd_msgs 이런 간접의존(indirect) 패키지까지 확인할때는 아래와 같이 rospack명령어를 사용하면 된다. 123456789101112131415161718$ rospack depends beginner_tutorialscpp_commonrostimeroscpp_traitsroscpp_serializationgenmsggenpymessage_runtimerosconsolestd_msgsrosgraph_msgsxmlrpcpproscpprosgraphcatkinrospackroslibrospy Package.xml 를 수정하여 메인테이너, 라이선스, 의존성등을 관리 할 수 있다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"ROS Study 002. Navigating The Filesystem","slug":"2015-12-29-ros-2-navigating-the-filesystem/2015-12-29-ros-2-navigating-the-filesystem","date":"2015-12-28T15:06:00.000Z","updated":"2016-10-27T05:02:20.715Z","comments":true,"path":"2015/12/29/2015-12-29-ros-2-navigating-the-filesystem/2015-12-29-ros-2-navigating-the-filesystem/","link":"","permalink":"http://noizbuster.com/2015/12/29/2015-12-29-ros-2-navigating-the-filesystem/2015-12-29-ros-2-navigating-the-filesystem/","excerpt":"","text":"튜토리얼을 위해서 튜토리얼 패키지 설치1sudo apt-get install ros-&lt;distro&gt;-ros-tutorials ROS의 파일 시스템 컨셉 ROS의 파일 시스템 컨셉은 Package와 Manifest로 이루어져있다. Package는 로스코드의 소프트웨어 구성 단위이고 각각의 패키지는 라이브러리, 실행파일, 스크립트 혹은 다른 아티팩트들을 포함할 수 있다. Manifest는 패키지의 다른 패키지와의 의존성, 버전, 관리자, 라이선스 등을 포함하는 메타데이터를 제공하는 패키지에 대한 설명이다. 실습 ROS의 패키지를 관리하고 탐색하는데 사용되는 명령어들 rospack : ROS의 패키지관리 툴 roscd : ROS의 Package 경로로 이동 rosls : ROS의 Package 경로 내부의 파일을 확인123456789101112131415#ROS 의 roscpp패키지의 위치를 찾는다.rospack find roscpp--&gt; YOUR_INSTALL_PATH/share/roscpp#해당 Package 가 설치된 경로로 Change Directory#Tab Completion 을 지원한다.roscd roscpppwd--&gt; YOUR_INSTALL_PATH/share/roscpp#내부의 경로로 이동roscd roscpp/cmakepwd--&gt; YOUR_INSTALL_PATH/share/roscpp/cmake#패키지 내부 파일들을 확인rosls roscpp_tutorials--&gt;cmake launch package.xml srv","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"ROS Study 001. Installing and Configuring Your ROS Environment","slug":"2015-12-28-ros-1-installation-and-configulation/2015-12-28-ros-1-installation-and-configulation","date":"2015-12-27T15:06:00.000Z","updated":"2016-10-27T05:00:56.375Z","comments":true,"path":"2015/12/28/2015-12-28-ros-1-installation-and-configulation/2015-12-28-ros-1-installation-and-configulation/","link":"","permalink":"http://noizbuster.com/2015/12/28/2015-12-28-ros-1-installation-and-configulation/2015-12-28-ros-1-installation-and-configulation/","excerpt":"","text":"ROS 개발환경 설정 우분투 14.04 LTS IDE : VIM http://wiki.ros.org/action/login/IDEs#Vim ROS : JADE Turtle Ubuntu Setup 우분투 14.04를 VM에 설치함 내 입맛대로 초기 세팅 123sudo apt-get remove unity-webapps-common #우분투 웹검색 삭제sudo apt-get install vim #VIM 설치sudo apt-get install git #Git 설치 ROS 설치 123456789#현재 최신 패키지 리스트 팻칭sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" &gt; /etc/apt/sources.list.d/ros-latest.list'#인증 키 발급sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net:80 --recv-key 0xB01FA116#설치sudo apt-get updatesudo apt-get install ros-jade-desktop-full#설치 가능한 패키지 목록 저장해두기 매번 하기 귀찮으니까apt-cache search ros-jade &gt; available-package-ros.txt ROS 초기 설정 1234sudo rosdep initrosdep updateecho \"source /opt/ros/jade/setup.bash\" &gt;&gt; ~/.bashrcsource ~/.bashrc 제대로 초기설정이 되었는지 확인 1echo $ROS_PACKAGE_PATH 이런식으로 나오면 오케이 1/home/youruser/catkin_ws/src:/opt/ros/indigo/share:/opt/ros/indigo/stacks OPTIONAL : 난 GUI를 사용할 일이 없기 때문에 host 에서 VM으로 SSH접속을 위한 세팅을 하였다. 1234sudo apt-get install openssh-serversudo vi etc/hosts.allow # 마지막줄에 ssh:ALL 추가sudo vi etc/hosts.deny # 마지막줄에 ALL:ALL 추가/etc/init.d/ssh restart 붙을때는 ssh -p [포트] [계정명]@주소 로 접속하면 된다. 실습에 x-window 가 필요한 경우가 있는데 이때는 -X 옵션을 준다.","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"robot","slug":"robot","permalink":"http://noizbuster.com/tags/robot/"},{"name":"ros","slug":"ros","permalink":"http://noizbuster.com/tags/ros/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]},{"title":"VS 프로젝트 공유시 제외해야할 파일들","slug":"2015-08-11-vs-metafile/2015-08-11-vs-metafile","date":"2015-12-13T15:06:00.000Z","updated":"2016-10-27T05:34:48.655Z","comments":true,"path":"2015/12/14/2015-08-11-vs-metafile/2015-08-11-vs-metafile/","link":"","permalink":"http://noizbuster.com/2015/12/14/2015-08-11-vs-metafile/2015-08-11-vs-metafile/","excerpt":"","text":"git이나 svn으로 혹은 어딘가에 제출할때 IDE 의 메타데이터나 로컬 설정파일들은 제외하는것이 좋다. 특히 VS의 경우 이런 메타데이터들의 크기가 크니 삭제하면 이래저래 많은 도움이 된다. ####공통으로 삭제해야 할 파일들 Debug 디렉토리 (솔루션, 프로젝트 경로상 모두) Release 디렉토리 (솔루션, 프로젝트 경로상 모두) .suo - 작업내역, 탭이나 창 위치정보가 저장됨 .user - 사용자별 설정내역이 저장됨 ####VS 버전마다 다른경우 ipch 디렉토리 .sdf .ncb 파일","categories":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}],"tags":[{"name":"visualstudio","slug":"visualstudio","permalink":"http://noizbuster.com/tags/visualstudio/"}],"keywords":[{"name":"development","slug":"development","permalink":"http://noizbuster.com/categories/development/"}]}]}